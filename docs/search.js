window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews", "kind": "module", "doc": "<p>Pumpwood Django Views.</p>\n\n<p>This package helps to develop Pumpwood bases systens using Django backend.\nIt will create padronized end-point for each <code>model_class</code> (Django Models)\nthat can be consumed using PumpWoodMicroserive object from\npumpwood_communication package.\n```</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "kind": "module", "doc": "<p>Define actions decorator.</p>\n\n<p>Define action decorator that can be used to expose function at execute\naction pumpwood end-points.</p>\n\n<p>Example of using the decorator to expose function to end-point:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">STATUS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;inactive&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Archived&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;dev&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Development&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;homolog&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Homologation&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;production&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Production&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">STATUS</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Status&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Status&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Description&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Dashboard description&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Notes&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;A long description of the dashboard&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">dimensions</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">JSONField</span><span class=\"p\">(</span>\n        <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">PumpWoodJSONEncoder</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Dimentions&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Key/Value Dimentions&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Expose an action associated with an object&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># It is important to use the type tips to correctly convert the</span>\n    <span class=\"c1\"># request payload to correct python types</span>\n    <span class=\"k\">def</span> <span class=\"nf\">object_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">string_arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">int_arg</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n\n        <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Expose a classmethod&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">class_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">list_of_dict_arg</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Class method will not receive pk when running execute_action</span>\n        <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Pass the auth_header as argument to function.&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">auth_header</span><span class=\"o\">=</span><span class=\"s2\">&quot;auth_header&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Auth header will be passed to function as argument, it can be used to</span>\n    <span class=\"c1\"># impersonate user using PumpWoodMicroserive.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pass_auth_header_to_function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">list_of_dict_arg</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span>\n                                     <span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Passing auth header to microservice object will impersonate</span>\n        <span class=\"c1\"># user.</span>\n        <span class=\"n\">related_fields_fetched</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span>\n            <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;MicroserviceRelatedModel&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">filter_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;fk_field&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">},</span>\n            <span class=\"n\">auth_header</span><span class=\"o\">=</span><span class=\"n\">auth_header</span><span class=\"p\">)</span>\n        <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action", "kind": "class", "doc": "<p>Define a Action class to be used in decorator action.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func [Callable]:</strong>  Function that will be decorated with @action Pumpwood\ndecorator.</li>\n<li><strong>info [str]:</strong>  Function information that will be returned at [GET] <code>actions</code>\nto user.</li>\n<li><strong>auth_header [str]:</strong>  Function argument that will be populated with <code>auth_header</code>\nwhen executing the function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.func_return", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.func_return", "kind": "variable", "doc": "<p>Type of the return associated with funciton.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.doc_string", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.doc_string", "kind": "variable", "doc": "<p>Doc string of the function</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.action_name", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.action_name", "kind": "variable", "doc": "<p>Name of the function.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.is_static_function", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.is_static_function", "kind": "variable", "doc": "<p>True if funciton is staticmethod or a classmethod (does not require\nan object to run)</p>\n", "annotation": ": bool"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.parameters", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.parameters", "kind": "variable", "doc": "<p>Dictionary with function arguments with types and if it is necessary\n(not set a default value) or opcional (with default value).</p>\n", "annotation": ": dict"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.info", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.info", "kind": "variable", "doc": "<p>Info associated with function that will be passed to user at [GET]\n<code>action end-point.</code></p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.auth_header", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.auth_header", "kind": "variable", "doc": "<p>Function argument that will receive <code>auth_header</code> information.\nauth_header can be to user impersonation when calling other end-points\nfrom the function.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.Action.to_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "Action.to_dict", "kind": "function", "doc": "<p>Return dict representation of the action.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary used to serialize action to action end-point.\n  Keys avaiable:</p>\n  \n  <ul>\n  <li><strong>action_name [str]</strong>: Name of the function.</li>\n  <li><strong>is_static_function [bool]</strong>: Boolean value indicating if\n  the function is a classmethod or staticmethod.</li>\n  <li><strong>info [str]</strong>: Information that will be avaiable to user using\n  action end-points.</li>\n  <li><strong>return [str]</strong>: Type of the return of the function.</li>\n  <li><strong>parameters [dict]</strong>: Arguments of the function with\n  information of types, default values.</li>\n  <li><strong>doc_string [str]</strong>: Doc string associated with the function.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.action", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "action", "kind": "function", "doc": "<p>Define decorator that will convert the function into a rest action.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>info [str]:</strong>  Just an information about the decorated function that will be\nreturned in GET /rest/<model_class>/actions/.</li>\n<li><strong>auth_header [str]:</strong>  Variable that will receive the auth_header, this can be used\nat the function to impersonation of the user to call other\nmicroservices.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return decorated function.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoviews.action</span> <span class=\"kn\">import</span> <span class=\"n\">action</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Action associated with a classmethod, is_static_function=True</span>\n<span class=\"c1\"># when returning information of the action. auth_header will</span>\n<span class=\"c1\"># be passed to function making possible to impersonate the user</span>\n<span class=\"nd\">@classmethod</span>\n<span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Dump dashboards and parameters&#39;</span><span class=\"p\">,</span> <span class=\"n\">auth_header</span><span class=\"o\">=</span><span class=\"s2\">&quot;auth_header&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">dump_dashboards</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span>\n                    <span class=\"n\">dashboard_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                    <span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n                    <span class=\"n\">filter_alias</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">exclude_alias</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span>\n        <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;TestEndPoint&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">auth_header</span><span class=\"o\">=</span><span class=\"n\">auth_header</span><span class=\"p\">)</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Action associated with a classmethod, is_static_function=False</span>\n<span class=\"c1\"># when returning information of the action. Auth header won&#39;t be passed</span>\n<span class=\"c1\"># as function argument.</span>\n<span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Dump dashboards and parameters&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_dashboards</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">dashboard_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.action.load_action_parameters", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.action", "qualname": "load_action_parameters", "kind": "function", "doc": "<p>Cast arguments to its original types.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func [Callable]:</strong>  Function that parameters will be casted according to function\narguments tips.</li>\n<li><strong>parameters [dict]:</strong>  Parameters received at execute action end-point, they will be\ncasted according to funciton tips.</li>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return parameters casted according to tips at function arguments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.aux.map_django_types", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.aux.map_django_types", "kind": "module", "doc": "<p>Create a dictionary to map django columns with python types.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.exception_handler", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.exception_handler", "kind": "module", "doc": "<p>Define custom exception handlers for Pumpwood systems.</p>\n\n<p>Custom erros can be used to correctly treat Pumpwood Exceptions and return\nthe treated erro as a JSON with not 2XX status code.</p>\n\n<p><code>custom_exception_handler</code> can be used at REST_FRAMEWORK MiddleWare at Django.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;rest_framework.permissions.IsAuthenticated&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;knox.auth.TokenAuthentication&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;EXCEPTION_HANDLER&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"c1\"># Add custom handler for API Calls</span>\n        <span class=\"s1\">&#39;pumpwood_djangoviews.exception_handler.custom_exception_handler&#39;</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.exception_handler.custom_exception_handler", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.exception_handler", "qualname": "custom_exception_handler", "kind": "function", "doc": "<p>Treat custom exception handler to PumpWoodExceptions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>exc [Exception]:</strong>  Exception raised processing request.</li>\n<li><strong>context:</strong>  Context of the error that was raised.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a response with error code depending of the PumpWoodException\n  raised. It returns a serialized dictionary with exception data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exc</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rest_framework</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.query", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.query", "kind": "module", "doc": "<p>Functions to run query at django using Pumpwood Rest API.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.query.filter_by_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.query", "qualname": "filter_by_dict", "kind": "function", "doc": "<p>Filter query using list dictonary.</p>\n\n<p>Filter query set using function args as argument for filter ORM function.\nfilter_list for filter_list, exclude_list for exclude and order by or\norder by.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>query_set:</strong>  Django original query set.</li>\n<li><strong>filter_dict [dict]:</strong>  Dictionary to be used as argument of\nquery_set.filter(**filter_dict).</li>\n<li><strong>exclude_dict [dict]:</strong>  Dictionary to be used as argument o\nquery_set.exclude(**exclude_dict)</li>\n<li><strong>order_by [list]:</strong>  List with arguments for query_set.order_by(*order_by)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Filtered query set.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query_set</span>, </span><span class=\"param\"><span class=\"n\">filter_dict</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">exclude_dict</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.renderer", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.renderer", "kind": "module", "doc": "<p>Create a custom JSON Renderer.</p>\n\n<p>Use <code>pumpwood_communication.serializers import pumpJsonDump</code> to dump\nalternative python types such as pandas DataFrames and datetimes, not\nbeen necessary to treat at the codes.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.renderer.PumpwoodJSONRenderer", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.renderer", "qualname": "PumpwoodJSONRenderer", "kind": "class", "doc": "<p>JSONRenderer that use pumpJsonDump to dump data to JSON.</p>\n", "bases": "rest_framework.renderers.JSONRenderer"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.renderer.PumpwoodJSONRenderer.render", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.renderer", "qualname": "PumpwoodJSONRenderer.render", "kind": "function", "doc": "<p>Overwrite render function to use pumpJsonDump.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">renderer_context</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "kind": "module", "doc": "<p>Define defult Routers for Pumpwood systems.</p>\n\n<p>Pumpwood end-points have defaults paths that are registered at the application.\nThe end-points are mapped using pumpwood-communication package to be\nconsumed by the client side.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers.PumpWoodRouter", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter", "kind": "class", "doc": "<p>Define a Router for PumpWoodRestService views.</p>\n\n<p>Router are used to define default end-points for Pumpwood for each\nmodel_class.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ImproperlyConfigured:</strong>  If a view different from PumpWoodRestService is used.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>Example of url.py file at Pumpwood Auth package.</p>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urljoin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoviews.routers</span> <span class=\"kn\">import</span> <span class=\"n\">PumpWoodRouter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoauth.config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">MEDIA_URL</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoauth.metabase</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">pumpwoodrouter</span> <span class=\"o\">=</span> <span class=\"n\">PumpWoodRouter</span><span class=\"p\">()</span>\n<span class=\"n\">pumpwoodrouter</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">viewset</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">RestMetabaseDashboard</span><span class=\"p\">)</span>\n<span class=\"n\">pumpwoodrouter</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">viewset</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">RestMetabaseDashboardParameter</span><span class=\"p\">)</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">pumpwoodrouter</span><span class=\"o\">.</span><span class=\"n\">urls</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "rest_framework.routers.BaseRouter"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers.PumpWoodRouter.register", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.register", "kind": "function", "doc": "<p>Register view urls using the name of the models as path.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>viewset:</strong>  A view set from rest framework.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ImproperlyConfigured:</strong>  If view is not a PumpWoodRestService for PumpWoodRouter and\nPumpWoodDataBaseRestService for PumpWoodDataBaseRouter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers.PumpWoodRouter.validate_view", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.validate_view", "kind": "function", "doc": "<p>Validate if view is of correct type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>viewset:</strong>  Rest framework view set, it must have inherited from</li>\n<li>PumpWoodRestService.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ImproperlyConfigured:</strong>  If view is not a PumpWoodRestService.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers.PumpWoodRouter.get_urls", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.get_urls", "kind": "function", "doc": "<p>Return a list of URL patterns, given the registered viewsets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers.PumpWoodDataBaseRouter", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "qualname": "PumpWoodDataBaseRouter", "kind": "class", "doc": "<p>Define a Router for PumpWoodDataBaseRestService views.</p>\n\n<p>Add some data routes to PumpWoodRouter.</p>\n\n<h6 id=\"patterns-registered\">Patterns registered:</h6>\n\n<blockquote>\n  <ul>\n  <li><code>[POST] rest/{basename}/pivot/</code>: Retrieve data according to\n  query dictonary without deserializing using serializers (return\n  the Pandas dataframe converted with to_dict([format])).</li>\n  <li><code>[POST] rest/{basename}/bulk-save/</code>: Save many objects at same\n  time, it can be used to upload large datasets.</li>\n  </ul>\n</blockquote>\n", "bases": "PumpWoodRouter"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers.PumpWoodDataBaseRouter.validate_view", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.routers", "qualname": "PumpWoodDataBaseRouter.validate_view", "kind": "function", "doc": "<p>Validate if view is of correct type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>viewset:</strong>  Rest framework view set, it must have inherited from</li>\n<li>PumpWoodRestService.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ImproperlyConfigured:</strong>  If view is not a PumpWoodRestService.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "kind": "module", "doc": "<p>Define base serializer for pumpwood and custom fields.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.ClassNameField", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "ClassNameField", "kind": "class", "doc": "<p>Serializer Field that returns model name.</p>\n\n<p>It is used as default at Pumpwood to <code>model_class</code> always returning\nmodel_class with objects.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">CustomSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField", "kind": "class", "doc": "<p>Serializer field for ForeignKey using microservice.</p>\n\n<p>This serializer will fetch object data from a microservice using a\nmicroservice object.</p>\n\n<p>This field makes a call to the loadbalancer, caution when microservice\ncalls the same microservice of origin or serialization might result on\ncircular fetching.</p>\n\n<p>MicroserviceForeignKeyField are always set as <code>required=False</code> and\n<code>read_only=True</code>.</p>\n\n<p>Example of usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">MetabaseDashboardSerializer</span><span class=\"p\">(</span><span class=\"n\">DynamicFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span>\n        <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Foreign Key</span>\n    <span class=\"c1\"># Will return the object data associated with updated_by_id at</span>\n    <span class=\"c1\"># updated_by key at the serialized object.</span>\n    <span class=\"n\">updated_by</span> <span class=\"o\">=</span> <span class=\"n\">MicroserviceForeignKeyField</span><span class=\"p\">(</span>\n        <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;User&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">microservice</span><span class=\"o\">=</span><span class=\"n\">microservice</span><span class=\"p\">,</span> <span class=\"n\">display_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>source [str]:</strong>  Source attribute that contains id value associated with\na foreign key.</li>\n<li><strong>microservice [PumpWoodMicroService]:</strong>  PumpWoodMicroService object that will be used to fetch\ninformation of the object associated with foreign key id.</li>\n<li><strong>model_class [str]:</strong>  Model class that will be used to request information at\nwith a retrieve.</li>\n<li><strong>display_field [str]:</strong>  Field that will be set as <code>__display_field__</code> at object\ndictonary.</li>\n<li><strong>fields List [str]:</strong>  List of the fields that should be returned at the object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"n\">pumpwood_communication</span><span class=\"o\">.</span><span class=\"n\">microservices</span><span class=\"o\">.</span><span class=\"n\">PumpWoodMicroService</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">display_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.microservice", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.microservice", "kind": "variable", "doc": "<p>Microservice object that will make retrieve calls for foreign key\nobject.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.model_class", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.model_class", "kind": "variable", "doc": "<p>String setting the foreign key destiny model_class.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.display_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.display_field", "kind": "variable", "doc": "<p>Set a display field to be returned as __display_field__ at foreign key\nobject. This might help frontend rendering dropdown or other\nvisualizations.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.fields", "kind": "variable", "doc": "<p>List of the field that will be returned with foreign key object.</p>\n", "annotation": ": List[str]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.to_representation", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.to_representation", "kind": "function", "doc": "<p>Use microservice to get object at serialization.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj:</strong>  Model object to retrieve foreign key associated object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the object associated with foreign key.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.to_internal_value", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.to_internal_value", "kind": "function", "doc": "<p>Raise error always, does not unserialize objects of this field.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>NotImplementedError:</strong>  Always raise NotImplementedError if try to unserialize the\nobject.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.to_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with information of the field. Keys associated:</p>\n  \n  <ul>\n  <li><strong>model_class [str]:</strong> Model class associated with foreign key.</li>\n  <li><strong>many [str]:</strong> If it will return a list of objects of one.\n  Foreign Key serializer will always return one object.</li>\n  <li><strong>display_field [str]:</strong> Display field that will be set to\n  __display_field__ key on serialized object.</li>\n  <li><strong>fields [str]:</strong> If set, fields that will be returned by\n  serializer, if not set will return de default list fields.</li>\n  <li><strong>object_field [str]:</strong> Name of the object field associated\n  with the foreign key (this field).</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField", "kind": "class", "doc": "<p>Serializer field for related objects using microservice.</p>\n\n<p>This serializer will fetch a list of objectsfrom a microservice using a\nmicroservice object at <code>list_without_pag</code> end-point. It will use\nserilializing object id to query for related object at destiny model\nclass <code>foreign_key</code>.</p>\n\n<p>This field makes a call to the loadbalancer, caution when microservice\ncalls the same microservice of origin or serialization might result on\ncircular fetching.</p>\n\n<p>MicroserviceRelatedField are always set as <code>required=False</code> and\n<code>read_only=True</code>.</p>\n\n<p>Example of usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">UserSerializer</span><span class=\"p\">(</span><span class=\"n\">DynamicFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span>\n        <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Foreign Key</span>\n    <span class=\"c1\"># Will return the object data associated with updated_by_id at</span>\n    <span class=\"c1\"># updated_by key at the serialized object.</span>\n    <span class=\"n\">dashboard_set</span> <span class=\"o\">=</span> <span class=\"n\">MicroserviceRelatedField</span><span class=\"p\">(</span>\n        <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;Dashboard&quot;</span><span class=\"p\">,</span> <span class=\"n\">foreign_key</span><span class=\"o\">:=</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">pk_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-created_at&quot;</span><span class=\"p\">],</span>\n        <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model_class&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>microservice [PumpWoodMicroService]:</strong>  PumpWoodMicroService object that is used on API calls.</li>\n<li><strong>model_class [str]:</strong>  Model class associated with related models.</li>\n<li><strong>foreign_key [str]:</strong>  Field associated with origin model class\n(actual.id->destiny.foreign_key).</li>\n<li><strong>pk_field [str]:</strong>  Actual object field that will be considered as a primary key\nto fetch destiny objects.</li>\n<li><strong>order_by [str]:</strong>  Fields that will order related model results, reverse can be\napplied using \"-\" at the begging of field name.\nEx: <code>['-created_at']</code>.</li>\n<li><strong>fields List[str]:</strong>  Fields that will be returned from related model, if not set\ndefault list fields will be returned.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"n\">pumpwood_communication</span><span class=\"o\">.</span><span class=\"n\">microservices</span><span class=\"o\">.</span><span class=\"n\">PumpWoodMicroService</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">foreign_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;id&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.microservice", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object that is used on API calls.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.model_class", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.model_class", "kind": "variable", "doc": "<p>Model class associated with related models.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.foreign_key", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.foreign_key", "kind": "variable", "doc": "<p>Field associated with origin model class\n(actual.id->destiny.foreign_key).</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.pk_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.pk_field", "kind": "variable", "doc": "<p>Actual object field that will be considered as a primary key to fetch\ndestiny objects.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.order_by", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.order_by", "kind": "variable", "doc": "<p>Fields that will order related model results, reverse can be applied\nusing \"-\" at the begging of field name. Ex: <code>['-created_at']</code>.</p>\n", "annotation": ": List[str]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.fields", "kind": "variable", "doc": "<p>Fields that will be returned from related model, if not set default\nlist fields will be returned.</p>\n", "annotation": ": List[str]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.MicroserviceRelatedField.to_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>model_class [str]:\n      Associated with serializer arguments.\n  many [bool]:\n      Will always return True sinalizing that a list of objcts\n      with realated information.\n  pk_field [str]:\n      Model pk associated with realated foreign key.\n  foreign_key [str]:\n      Forening key field associated with orgin model class.\n  order_by [List[str]]:\n      List of fields that will order the results.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField", "kind": "class", "doc": "<p>Serializer field for ForeignKey using database connection.</p>\n\n<p>This serializer will fetch object data from a database using a\nconnection and converting to object using serializer.</p>\n\n<p>Serializer can be passed as python object or using a string to the path\nthat will be lazy loaded when first fetch.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">SerializerPumpwoodMFAMethod</span><span class=\"p\">(</span><span class=\"n\">DynamicFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># ForeignKey</span>\n    <span class=\"n\">user_id</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">LocalForeignKeyField</span><span class=\"p\">(</span>\n        <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;pumpwood_djangoauth.registration.&quot;</span> <span class=\"o\">+</span>\n            <span class=\"s2\">&quot;serializers.SerializerUser&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">display_field</span><span class=\"o\">=</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;username&quot;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>serializer Union[str, serializers.ModelSerializer]:</strong>  Serializer can be lazy loaded passing the path to avoid\ncircular import, serializer_cache will cache serializer to\nremove necessity of importing the serializer at every request.</li>\n<li><strong>display_field [str]:</strong>  Display field that will be set to <code>__display_field__</code> key at\nthe object.</li>\n<li><strong>fields List[str]:</strong>  Limit the return fields to fields set, if not set will return\nlist default fields.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">serializer</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">rest_framework</span><span class=\"o\">.</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">display_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.serializer_cache", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.serializer_cache", "kind": "variable", "doc": "<p>Serializer can be lazy loaded passing the path to avoid circular import,\nserializer_cache will cache serializer to remove necessity of importing\nthe serializer at every request.</p>\n", "annotation": ": rest_framework.serializers.ModelSerializer"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.serializer", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.serializer", "kind": "variable", "doc": "<p>Serializer or string to serializer path that will be lazy loaded.</p>\n", "annotation": ": Union[str, rest_framework.serializers.ModelSerializer]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.display_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.display_field", "kind": "variable", "doc": "<p>Display field that will be set to <code>__display_field__</code> key at the\nobject.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.fields", "kind": "variable", "doc": "<p>Limit the return fields to fields set, if not set will return list\ndefault fields.</p>\n", "annotation": ": List[str]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.to_representation", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.to_representation", "kind": "function", "doc": "<p>Transform the <em>outgoing</em> native value into primitive data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalForeignKeyField.to_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>model_class [str]:\n      Model class associated with foreign key.\n  many [bool]:\n      Return always False, only one object will be returned.\n  display_field [str]:\n      Object display_field will be returned as __display_field__\n      key.\n  object_field [str]:\n      Will return the field associated with this serializer.\n  fields [List[str]]:\n      If not None will restrict the fields returned at object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalRelatedField", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField", "kind": "class", "doc": "<p>Serializer field for related objects using microservice.</p>\n\n<p>This serializer will fetch a list of objectsfrom a microservice using a\nmicroservice object at <code>list_without_pag</code> end-point. It will use\nserilializing object id to query for related object at destiny model\nclass <code>foreign_key</code>.</p>\n\n<p>This field makes a call to the loadbalancer, caution when microservice\ncalls the same microservice of origin or serialization might result on\ncircular fetching.</p>\n\n<p>MicroserviceRelatedField are always set as <code>required=False</code> and\n<code>read_only=True</code>.</p>\n\n<p>Example of usage:\n```python\nclass UserSerializer(DynamicFieldsModelSerializer):\n    pk = serializers.IntegerField(\n        source='id', allow_null=True, required=False)\n    model_class = ClassNameField()</p>\n\n<pre><code># Foreign Key\n# Will return the object data associated with updated_by_id at\n# updated_by key at the serialized object.\napi_permission_set = LocalRelatedField(\n    serializer=(\n        \"pumpwood_djangoauth.api_permission.\"\n        \"serializers.SerializerPumpwoodPermissionPolicyUserM2M\"),\n    order_by=[\"-id\"])\n</code></pre>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalRelatedField.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.LocalRelatedField.to_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>model_class [str]:\n      Model class associated with related model.\n  many [bool]:\n      Return always True indicating the user will receive a list\n      of objects.\n  pk_field [str]:\n      Pk field associated with origin model class that will be used\n      to query related models at foreign_key.\n  foreign_key [str]:\n      Foreign Key that will be used to fetch realated models using\n      origin model foreign key.\n  order_by [List[str]]:\n      List of fields to be used to order results from realted\n      models.\n  fields [List[str]]:\n      List of fields that will be returned by related model. If not\n      set default list fields from related model will be used.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer", "kind": "class", "doc": "<p>A ModelSerializer that change fields returned on serialization.</p>\n\n<p>This serializer make possible to change the serialization fields acording\nto arguments that are passed on serializer instanciation.</p>\n\n<h4 id=\"default-list-fields\">Default list fields</h4>\n\n<p>Attribute <code>list_fields</code> set the default fields that will be returned\nif <code>default_fields=True</code> argument is set.</p>\n\n<h4 id=\"usage-with-foreign-key\">Usage with foreign key</h4>\n\n<p>Foreign keys can be returned both for many=True and also many=False\nserializations passing <code>foreign_key_fields=True</code> argument.</p>\n\n<h4 id=\"usage-with-related-objects\">Usage with related objects</h4>\n\n<p>Serialization of many objects will not return related models serializers (\nMicroserviceRelatedField, LocalRelatedField). This behaviour will overide\nrelated_fields argumment, even if set as related_fields=True.</p>\n\n<p>Related Models serizalization is an expensive request at backend, should\nbe used only for <code>many=False</code> serialization (one object).</p>\n\n<h4 id=\"usage-with-fields-argument\">Usage with fields argument</h4>\n\n<p>All fields set on fields argument will be returned dispite beeing\nforeign key or related and arguments <code>related_fields=False</code>,\n<code>foreign_key_fields=False</code>.</p>\n\n<h6 id=\"examples\">Examples:</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">serializers</span> <span class=\"kn\">import</span> <span class=\"n\">SerializerCompany</span>\n\n\n<span class=\"c1\"># Defining serializer for User object</span>\n<span class=\"k\">class</span> <span class=\"nc\">SerializerUser</span><span class=\"p\">(</span><span class=\"n\">DynamicFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># ForeignKey</span>\n    <span class=\"n\">api_permission_set</span> <span class=\"o\">=</span> <span class=\"n\">LocalRelatedField</span><span class=\"p\">(</span>\n        <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;pumpwood_djangoauth.api_permission.&quot;</span>\n            <span class=\"s2\">&quot;serializers.SerializerPumpwoodPermissionPolicyUserM2M&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-id&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">api_permission_group_set</span> <span class=\"o\">=</span> <span class=\"n\">LocalRelatedField</span><span class=\"p\">(</span>\n        <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;pumpwood_djangoauth.api_permission.&quot;</span>\n            <span class=\"s2\">&quot;serializers.SerializerPumpwoodPermissionUserGroupM2M&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-id&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">company</span> <span class=\"o\">=</span> <span class=\"n\">LocalRelatedField</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">SerializerCompany</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;model_class&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;email&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;first_name&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;last_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;last_login&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date_joined&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_active&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;is_staff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_superuser&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mfa_method_set&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;api_permission_set&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;api_permission_group_set&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;company&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">list_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model_class&quot;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_active&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;is_superuser&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;is_staff&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;username&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;email&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;last_login&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">read_only</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;last_login&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;date_joined&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Query for User objects</span>\n<span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create a serializer that will return just [&#39;pk&#39;, &#39;username&#39;]</span>\n<span class=\"c1\"># fields when dumping the objects.</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Return all fields except for foreign key and related models.</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return all fields including foreign key and except related models</span>\n<span class=\"c1\"># (serializing many=True).</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;, &#39;company&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># related_fields=True will be ignored for many=True</span>\n    <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return fields set as default list fields</span>\n<span class=\"c1\"># [&quot;pk&quot;, &quot;model_class&quot;, &#39;is_active&#39;, &#39;is_superuser&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;username&#39;, &#39;email&#39;, &#39;last_login&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;pk&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return all fields including foreign key and related for one</span>\n<span class=\"c1\"># object</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;, &#39;mfa_method_set&#39;,</span>\n<span class=\"c1\">#  &#39;api_permission_set&#39;, &#39;api_permission_group_set&#39;,</span>\n<span class=\"c1\">#  &#39;company&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Return all fields, but foreign key and related for one</span>\n<span class=\"c1\"># object</span>\n<span class=\"c1\"># [&#39;pk&#39;, &#39;model_class&#39;, &#39;username&#39;, &#39;email&#39;, &#39;first_name&#39;,</span>\n<span class=\"c1\">#  &#39;last_name&#39;, &#39;last_login&#39;, &#39;date_joined&#39;, &#39;is_active&#39;,</span>\n<span class=\"c1\">#  &#39;is_staff&#39;, &#39;is_superuser&#39;]</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">UserDynamicFieldsModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"n\">all_users</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">foreign_key_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">related_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">default_fields</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n</code></pre>\n  </div>\n</blockquote>\n", "bases": "rest_framework.serializers.ModelSerializer"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<p>Extend ModelSerializer from rest framework.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fields [List[str]]:</strong>  It is set internaly as <code>None</code> using the kwargs. List\nthe fields that should be dumped.</li>\n<li><strong>default_fields [bool]:</strong>  It is set internaly as <code>False</code> using the kwargs. Set if only\ndefault list fields set on <code>Meta.list_fields</code> should be\ndumped.</li>\n<li><strong>foreign_key_fields [bool]:</strong>  It is set internaly as <code>False</code> using the kwargs. Set if foreign\nkeys should be retuned.</li>\n<li><strong>related_fields [bool]:</strong>  It is set internaly as <code>False</code> using the kwargs. Set if related\nmodels should be retuned (only at many=False serializations).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.model_class", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.model_class", "kind": "variable", "doc": "<p>Always <code>model_class</code> associated with object for all Pumpwood objects.\nSet default ClassNameField() for this field</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.get_list_fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.get_list_fields", "kind": "function", "doc": "<p>Get list fields from serializer.</p>\n\n<p>Default behaviour is to extract <code>list_fields</code> from Meta class.</p>\n\n<p>This method can be overwriten for custom behaviour.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No Args.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Default fields to be used at default_fields=True\n  serializations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.get_foreign_keys", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.get_foreign_keys", "kind": "function", "doc": "<p>Return a dictonary with all foreign_key fields.</p>\n\n<p>This methods is used at fill_options end-point to correctly treat\nforeign keys.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictionary with field name as keys and relation\n  information as value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.get_related_fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.get_related_fields", "kind": "function", "doc": "<p>Return a dictionary with all related fields (M2M).</p>\n\n<p>This methods is used at fill_options end-point to correctly treat\nrelated fields.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictionary with field name as keys and relation\n  information as value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.utils", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.utils", "kind": "module", "doc": "<p>Miscellaneous auxiliary functions.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.utils.reverse_object_admin_url", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.utils", "qualname": "reverse_object_admin_url", "kind": "function", "doc": "<p>Return Admin URL for an object.</p>\n\n<p>If id is set return object change admin URL, if not set list admin URL.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj [object|model_class]:</strong>  Object or Django model to be reversed.</li>\n<li><strong>id [int]:</strong>  Id of the object to be reversed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Reverse Admin URL.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "kind": "module", "doc": "<p>Create views using Pumpwood pattern.</p>\n\n<p>Define base views associated with Pumpwood end-points.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.save_serializer_instance", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "save_serializer_instance", "kind": "function", "doc": "<p>Save instant using serializer and raise if any validation error.</p>\n\n<p>Is is not valid acording to serializer validation, raise error.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>serializer_instance:</strong>  Serializer with an object to be saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>New object updated or created.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectSavingException:</strong>  'Error when validating fields when saving object'. Raise error if\nvalidation of serializer is not correct. It will return error\ndictonary at error payload.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">serializer_instance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">metabase.models</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboard</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metabase.serializers</span> <span class=\"kn\">import</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">microservice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RestMetabaseDashboard</span><span class=\"p\">(</span><span class=\"n\">PumpWoodRestService</span><span class=\"p\">):</span>\n    <span class=\"n\">endpoint_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Metabase Dashboard&quot;</span>\n    <span class=\"n\">notes</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Register and generate url to embed Metabase dashboards&quot;</span>\n\n    <span class=\"c1\"># Django model that will be mapped to this end-point</span>\n    <span class=\"n\">service_model</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboard</span>\n\n    <span class=\"c1\"># Serializer that will be used to dump model data</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">MetabaseDashboardSerializer</span>\n\n    <span class=\"c1\"># PumpwoodStorage object that will be used to save and retrieve</span>\n    <span class=\"c1\"># file data from storage.</span>\n    <span class=\"n\">storage_object</span> <span class=\"o\">=</span> <span class=\"n\">storage_object</span>\n\n    <span class=\"c1\"># PumpWoodMicroService object used to communicate with other</span>\n    <span class=\"c1\"># microservice if necessary. Ex: Trigger ETL Jobs on object</span>\n    <span class=\"c1\"># saving and update.</span>\n    <span class=\"n\">microservice</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span>\n\n    <span class=\"c1\"># Fields that will be considered as files and extensions that</span>\n    <span class=\"c1\"># will be accepted.</span>\n    <span class=\"n\">file_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;file&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xlsx&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">###########################################################</span>\n    <span class=\"c1\"># Gui this information will be returned at retrieve_options</span>\n    <span class=\"c1\"># to help frontend correctly render app frontend.</span>\n    <span class=\"c1\"># Set field sets, grouping the fields and hiding those that</span>\n    <span class=\"c1\"># ar not listed on fieldsets</span>\n    <span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"c1\"># This fields will be set as readonly if fill_options_validation</span>\n    <span class=\"c1\"># is called with query parameter `?user_type=gui`</span>\n    <span class=\"n\">gui_readonly</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># Indication how the object could be presented to user</span>\n    <span class=\"n\">gui_verbose_field</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span>\n</code></pre>\n</div>\n", "bases": "rest_framework.viewsets.ViewSet"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.endpoint_description", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.endpoint_description", "kind": "variable", "doc": "<p>Description of the end-point, this information will be avaiable at\n<code>rest/pumpwood/endpoints/</code> for frontend. This information will be\nsaved at KongRoute, it must be unique for all microservices</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.dimensions", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.dimensions", "kind": "variable", "doc": "<p>Dimensions associated with end-points. This information will be saved\nat KongRoute dimensions.</p>\n", "annotation": ": dict", "default_value": "{}"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.icon", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.icon", "kind": "variable", "doc": "<p>Icon associated with model class. This information will be saved\nat KongRoute icon field.</p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.service_model", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.service_model", "kind": "variable", "doc": "<p>Django model associated end-points will be made avaiable.</p>\n", "annotation": ": django.db.models.base.Model"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.storage_object", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.storage_object", "kind": "variable", "doc": "<p>PumpwoodStorage object that will be used to save and retrieve\nfile data from storage.</p>\n", "annotation": ": pumpwood_miscellaneous.storage.PumpWoodStorage"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.microservice", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object used to communicate with other\nmicroservice if necessary. Ex: Trigger ETL Jobs on object\nsaving and update.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.trigger", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.trigger", "kind": "variable", "doc": "<p>If should be called ELTTrigger at ETL microservice at saving, deleting\nand executing actions. Default value is False.</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.serializer", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.serializer", "kind": "variable", "doc": "<p>Serializer that will be used to dump data on end-points.</p>\n", "annotation": ": pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.file_fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.file_fields", "kind": "variable", "doc": "<p>File fields associated with model, it is a dictonary with keys as\nfield keys and values as a list of accepted extensions.</p>\n", "default_value": "{}"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.list_paginate_limit", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_paginate_limit", "kind": "variable", "doc": "<p>List end-point pagination default limit.</p>\n", "annotation": ": int", "default_value": "50"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.gui_retrieve_fieldset", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.gui_retrieve_fieldset", "kind": "variable", "doc": "<p>Retrieve field set to be passed to gui from <code>retrieve_view_options</code>.\nIt is a list of dictonary with keys name for name of the viewset and\nfields for the fields that are associated.</p>\n\n<p>Example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">gui_retrieve_fieldset</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;main&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alias&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;description&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;notes&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;dimensions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_by&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;updated_at&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;metabase_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;auto_embedding&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;object_model_class&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;object_pk&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;expire_in_min&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_theme&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;default_is_bordered&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default_is_titled&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;extra_info&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n", "annotation": ": List[dict]", "default_value": "None"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.gui_verbose_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.gui_verbose_field", "kind": "variable", "doc": "<p>Suggest verbose for object using information from object. It is set\nas python string format, default <code>pk</code>. Ex: <code>{pk} | {description}</code> will\nuse information from <code>pk</code> and <code>description</code> keys.</p>\n", "annotation": ": str", "default_value": "&#x27;pk&#x27;"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.gui_readonly", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.gui_readonly", "kind": "variable", "doc": "<p>Set readonly fields when calling with <code>user_type=gui</code> for\n<code>fill_options_validation</code> end-point.</p>\n", "annotation": ": List[str]", "default_value": "[]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.get_gui_retrieve_fieldset", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_gui_retrieve_fieldset", "kind": "function", "doc": "<p>Return gui_retrieve_fieldset attribute.</p>\n\n<p>This function can be overwriten to add custom funcionalities\nto get <code>gui_retrieve_fieldset</code> attribute.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return <code>gui_retrieve_fieldset</code> attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.get_gui_verbose_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_gui_verbose_field", "kind": "function", "doc": "<p>Return gui_verbose_field attribute.</p>\n\n<p>This function can be overwriten to add custom funcionalities\nto get <code>gui_verbose_field</code> attribute.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return <code>gui_verbose_field</code> attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.get_gui_readonly", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_gui_readonly", "kind": "function", "doc": "<p>Return gui_readonly attribute.</p>\n\n<p>This function can be overwriten to add custom funcionalities\nto get <code>gui_readonly</code> attribute.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return <code>gui_readonly</code> attribute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.get_list_fields", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_list_fields", "kind": "function", "doc": "<p>Return list_fields from associated serializer.</p>\n\n<p>This function can be overwriten to add custom funcionalities\nto get <code>self.serializer().get_list_fields()</code> data.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return list_fields for model.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.list", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list", "kind": "function", "doc": "<p>View function to list objects with pagination.</p>\n\n<p>Number of objects are limited by. To get next page, use\nexclude_dict['pk__in': [list of the received pks]] to get more\nobjects.</p>\n\n<p>..: notes:\n    Models with deleted field will have objects with deleted=True\n    excluded by default from results. To retrive these objects\n    explicity define <code>exclude_dict</code> <code>{'deleted': None}</code> or\n    <code>{'deleted': False}</code>.</p>\n\n<p>Use to limit the query .query.filter_by_dict function. Request\nexpected parameters and query parameters are listed bellow:</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<ul>\n<li><strong>filter_dict [dict] = {}:</strong>\nDictionary passed as <code>model.objects.filter(**filter_dict)</code>.<br></li>\n<li><strong>exclude_dict [dict] = {}:</strong>\nDictionary passed as\n<code>model.objects.exclude(**filter_dict)</code>.<br></li>\n<li><strong>order_by [dict] = []:</strong>\nDictionary passed as <code>model.objects.exclude(*order_by)</code>.<br></li>\n<li><strong>limit [int] = None:</strong>\nLimit of the query result, if not set attribute\n<code>list_paginate_limit</code> will be used insted.<br></li>\n<li><strong>fields [List[str]] = []:</strong>\nList of fields that should be returned on results objects.<br></li>\n<li><strong>default_fields [bool] = False:</strong>\nIf serializer <code>list_fields</code> should be used to filter the\nreturned fields.<br></li>\n<li><strong>foreign_key_fields [bool] = False:</strong>\nIf foreign keys should be returned with object data.<br></li>\n</ul>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the result of the query limited to\n  <code>list_paginate_limit</code> attribute. Objects are serialized\n  using <code>serializer</code> attribute.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodQueryException:</strong>  Raise if any error when treating the request.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.list_without_pag", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_without_pag", "kind": "function", "doc": "<p>View function to list objects <strong>without</strong> pagination.</p>\n\n<p>..: notes:\n    Models with deleted field will have objects with deleted=True\n    excluded by default from results. To retrive these objects\n    explicity define <code>exclude_dict</code> <code>{'deleted': None}</code> or\n    <code>{'deleted': False}</code>.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>Be careful with the number of the objects that will be fetched!\nThis end-point does not paginate data returning all information\nof query result.</p>\n\n</div>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<ul>\n<li><strong>filter_dict [dict] = {}:</strong>\nDictionary passed as <code>model.objects.filter(**filter_dict)</code>.<br></li>\n<li><strong>exclude_dict [dict] = {}:</strong>\nDictionary passed as\n<code>model.objects.exclude(**filter_dict)</code>.<br></li>\n<li><strong>order_by [dict] = []:</strong>\nDictionary passed as <code>model.objects.exclude(*order_by)</code>.<br></li>\n<li><strong>fields [List[str]] = []:</strong>\nList of fields that should be returned on results objects.<br></li>\n<li><strong>default_fields [bool] = False:</strong>\nIf serializer <code>list_fields</code> should be used to filter the\nreturned fields.<br></li>\n<li><strong>foreign_key_fields [bool] = False:</strong>\nIf foreign keys should be returned with object data.<br></li>\n</ul>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the result of the query <strong>without</strong> pagination . Objects\n  are serialized using <code>serializer</code> attribute.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodQueryException:</strong>  Raise if any error when treating the request.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.retrieve", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.retrieve", "kind": "function", "doc": "<p>Retrieve view, uses the retrieve_serializer to return object with pk.</p>\n\n<p>Query parameters are loaded as json data, ex:\n<code>json.loads(request.query_params.get('fields', 'null'))</code></p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>GET request only, does not have payload.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<ul>\n<li><strong>fields [List[str]] = None:</strong> List of the fields that should be\nreturned.</li>\n<li><strong>foreign_key_fields [bool] = False:</strong> If foreign key should be\nreturned with object data.</li>\n<li><strong>related_fields [bool] = False:</strong> If related fields should be\nreturned with object data.</li>\n<li><strong>default_fields [bool] = False:</strong> If only serializer list_fields\nshould be returned.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request [pk]:</strong>  Django request.</li>\n<li><strong>int [pk]:</strong>  Object pk to be retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The representation of the object with pk dumped by\n  self.serializer using arguments passed on query parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.retrieve_file", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.retrieve_file", "kind": "function", "doc": "<p>Read file without stream.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>This end-point will read de file from storage and them return the\nrequest. Be carefull when retriving large files (greater than\n10Mb).</p>\n\n</div>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>GET request only, does not have payload.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<ul>\n<li><strong>file_field [str]:</strong> File field to receive stream file.\nreturned with object data.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pk [int]:</strong>  Pk of the object to save file field.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a file associated with object pk, file field <code>file_field</code>\n  read from storage.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  '{field} must be set on file_fields dictionary.'. Indicates\nthat the requested file field was not found on view\n<code>file_fields</code> attribute.</li>\n<li><strong>PumpWoodForbidden:</strong>  'storage_object not set'. Indicates that the <code>storage_object</code>\nattribute is not set at view. This view can not perform\nfile operations.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'field [{}] is not set at object'. Indicates that requested\nfile field is not set on object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bytes</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.delete", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.delete", "kind": "function", "doc": "<p>Delete view.</p>\n\n<p>.. notes::\n    If model has deleted field, the default behaviour will set this\n    field to True not deleting the object. To force deletion it is\n    necessary to use query paramenter <code>force_delete=True</code></p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>GET request only, does not have payload.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<ul>\n<li><strong>force_delete [bool] = False:</strong> Force deletion of models that\nhave <code>deleted</code> field. If False, object with deleted\nwill not be deleted, but deleted will be set as True.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n<li><strong>pk [int]:</strong>  Object pk to be retrieve.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return the object that was removed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.delete_many", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.delete_many", "kind": "function", "doc": "<p>Delete many data using filter.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<p>This action will delete all objects that satisfies the query\nfilter_dict and exclude_dict. It will also delete objects with\ndeleted fields. <strong>THIS REQUEST CAN NOT BE UNDONE</strong>.</p>\n\n</div>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>GET request only, does not have payload.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<ul>\n<li><strong>filter_dict [dict] = {}:</strong>\nDictionary passed as <code>model.objects.filter(**filter_dict)</code>.<br></li>\n<li><strong>exclude_dict [dict] = {}:</strong>\nDictionary passed as\n<code>model.objects.exclude(**filter_dict)</code>.<br></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if operation has completed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodObjectDeleteException:</strong>  If any error raised when performing request.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.remove_file_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.remove_file_field", "kind": "function", "doc": "<p>Remove file field.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>GET request only, does not have payload.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<ul>\n<li><strong>file_field [str]:</strong>\nFile field associated with a file that will be removed.<br></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n<li><strong>pk [int]:</strong>  pk of the object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if the object was removed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'file_field must be set on self.file_fields dictionary.'.\nIndicates that <code>file_file</code> is not in file_fields keys of\nthe view.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'field [{}] not found at object'. Indicates that file was not\nfound on storage.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.save", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.save", "kind": "function", "doc": "<p>Save and update object acording to request.data.</p>\n\n<p>Object will be updated if request.data['pk'] is not None.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>Object to be saved. If a pk is set them the object will be updated,\nif pk is None or not set a new object will be created.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Serialized new/updated object.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodException:</strong>  'Object model class diferent from {service_model} :\n{service_model}'. Indicates that the end-point and the\nmodel_class of the object are impatible.</li>\n<li><strong>PumpWoodObjectSavingException:</strong>  'Error when validating fields when saving object'. Indicates\nthat there were error when validating object\nat the serializer. Error payload will have the fields with\nerror as keys of the dictonary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.list_actions", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_actions", "kind": "function", "doc": "<p>List model exposed actions.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>No payload.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a list of dictonary with information of the avaiable\n  actions for model class. Actions info object keys:</p>\n  \n  <ul>\n  <li><strong>action_name [str]:</strong> Name of the function associated with\n  action on model_class.</li>\n  <li><strong>action_name__verbose [str]:</strong> Name of the function associated\n  with action on model_class translates by Pumpwood I8s.</li>\n  <li><strong>doc_string [str]:</strong> Doc string associated with function.</li>\n  <li><strong>info [str]:</strong> Info for que action passed as argument at action\n  function decorator.</li>\n  <li><strong>info__verbose [str]:</strong> Info for que action passed as argument\n  at action function decorator model_class translates by\n  Pumpwood I8s.</li>\n  <li><strong>is_static_function [bool]:</strong> Boolean value setting if function\n  is classmethod or staticmethod (True), in this cases it is not\n  associated with an object and aa pk should no be passed as\n  argument.</li>\n  <li><strong>parameters [dict]:</strong> Dictionary with paramenter as key and with\n  keys:\n  <ul>\n  <li><strong>default_value [any]:</strong> Default value for paramenter.</li>\n  <li><strong>many [bool]:</strong> If the function parameter is many (list).</li>\n  <li><strong>required [bool]:</strong> If the parameter is necessary to run the\n  function or optinal.</li>\n  <li><strong>type [str]:</strong> Type of the paramenter that shoul be passed\n  to function.</li>\n  <li><strong>verbose_name [str]:</strong> Parameter name translated using\n  Pumpwood I8s.</li>\n  </ul></li>\n  <li><strong>return [dict]:</strong> A dictionary with the type associated with\n  function return. Keys:\n  <ul>\n  <li><strong>many [bool]:</strong> If the return result is a list.</li>\n  <li><strong>type [str]:</strong> Type of the return.</li>\n  </ul></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.execute_action", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.execute_action", "kind": "function", "doc": "<p>Execute action over object or class using parameters.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>Payload dictionary correspont to function parameters as key->value\nelements.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n<li><strong>action_name [str]:</strong>  Action name.</li>\n<li><strong>pk [pk]:</strong>  Of the object that will be used to run the action. For\nstaticmethods and classmethods the object should not be\npassed as argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with keys:\n  -</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodActionArgsException:</strong>  'Action [{action}] at model [{class_name}] is not\na classmethod and not pk provided.'. Indicates that the action\nis not a classmethod and the pk was not passed as function\nargument.</li>\n<li><strong>PumpWoodActionArgsException:</strong>  'Action [{action}] at model [{class_name}] is a\nclassmethod and pk provided.'. Indicates that the action is\na classmethod, but a pk was passed as argument.</li>\n<li><strong>PumpWoodObjectDoesNotExist:</strong>  'Requested object {service_model}[{pk}] not found.'.\nIndicates that the object with [pk] was not found on\ndatabase.</li>\n<li><strong>PumpWoodActionArgsException:</strong>  'error when unserializing function arguments: [...]'.\nIndicates that it was not possible to unserialize objects\npassed as function arguments. Pumpwood used function tips\ntypes to convert the arguments on correct types before\npassing them to function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">action_name</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.cls_fields_options", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.cls_fields_options", "kind": "function", "doc": "<p>Return field options using serializer.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>No args.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return information for each column to render search filters on\n  frontend. Each field will have:</p>\n  \n  <ul>\n  <li><strong>column [str]:</strong> Name of the column associated with the\n  field (same as the key).</li>\n  <li><strong>column__verbose [str]:</strong> Name of the collumns translated\n  using Pumpwood I8s.</li>\n  <li><strong>default [str]:</strong> Defult value for column.</li>\n  <li><strong>extra_info [str]:</strong> Extra information for the collumns\n  can be used to pass information about foreign key or\n  related fields.</li>\n  <li><strong>help_text [str]:</strong> Help text associated with the collumn.</li>\n  <li><strong>help_text__verbose [str]:</strong> Help text associated with the\n  collumn translated using Pumpwood I8s.</li>\n  <li><strong>indexed [str]:</strong> If this column is indexed.</li>\n  <li><strong>nullable [str]:</strong> If this column is nullable.</li>\n  <li><strong>primary_key [str]:</strong> If this column is part of the primary\n  key of the table. This is use full for tables with\n  composite pk.</li>\n  <li><strong>read_only [str]:</strong> If this column is read-only on\n  end-point. The results for this value may differ from\n  fill_validation due to <code>gui_readonly</code>.</li>\n  <li><strong>type [str]:</strong> Type of the column, will return Python types.</li>\n  <li><strong>unique [str]:</strong> If this column has an unique restriction.</li>\n  <li><strong>in [str]:</strong> If column type is options, this key will\n  indicates the accepted values for this field. This element\n  is a dictonary with keys:\n  <ul>\n  <li><strong>description:</strong> Human readble value for option.</li>\n  <li><strong>description__verbose:</strong> Human readble value for\n  option translated by Pumpwood I8s.</li>\n  <li><strong>value:</strong> Value of the option that will be saved on\n  database, for save end-points use this value to\n  modify the object.</li>\n  </ul></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.search_options", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.search_options", "kind": "function", "doc": "<p>Return options to be used in list funciton.</p>\n\n<p>THIS END-POINT IS DEPRECTED</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.fill_options", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.fill_options", "kind": "function", "doc": "<p>Return options for object update acording its partial data.</p>\n\n<p>THIS END-POINT IS DEPRECTED</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.list_view_options", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_view_options", "kind": "function", "doc": "<p>Return information to render list views on frontend.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>No payload data.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictionary with keys:</p>\n  \n  <ul>\n  <li><strong>list_fields[List[str]]:</strong> Return a list of default list fields\n  that should be redendered on list view.</li>\n  <li><strong>field_type [dict]:</strong> Return information for each column to\n  render search filters on frontend. Each field will have:\n  <ul>\n  <li><strong>column [str]:</strong> Name of the column associated with the\n  field (same as the key).</li>\n  <li><strong>column__verbose [str]:</strong> Name of the collumns translated\n  using Pumpwood I8s.</li>\n  <li><strong>default [str]:</strong> Defult value for column.</li>\n  <li><strong>extra_info [str]:</strong> Extra information for the collumns\n  can be used to pass information about foreign key or\n  related fields.</li>\n  <li><strong>help_text [str]:</strong> Help text associated with the collumn.</li>\n  <li><strong>help_text__verbose [str]:</strong> Help text associated with the\n  collumn translated using Pumpwood I8s.</li>\n  <li><strong>indexed [str]:</strong> If this column is indexed.</li>\n  <li><strong>nullable [str]:</strong> If this column is nullable.</li>\n  <li><strong>primary_key [str]:</strong> If this column is part of the primary\n  key of the table. This is use full for tables with\n  composite pk.</li>\n  <li><strong>read_only [str]:</strong> If this column is read-only on\n  end-point. The results for this value may differ from\n  fill_validation due to <code>gui_readonly</code>.</li>\n  <li><strong>type [str]:</strong> Type of the column, will return Python types.</li>\n  <li><strong>unique [str]:</strong> If this column has an unique restriction.</li>\n  <li><strong>in [str]:</strong> If column type is options, this key will\n  indicates the accepted values for this field. This element\n  is a dictonary with keys:\n  <ul>\n  <li><strong>description:</strong> Human readble value for option.</li>\n  <li><strong>description__verbose:</strong> Human readble value for\n  option translated by Pumpwood I8s.</li>\n  <li><strong>value:</strong> Value of the option that will be saved on\n  database, for save end-points use this value to\n  modify the object.</li>\n  </ul></li>\n  </ul></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.retrieve_view_options", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.retrieve_view_options", "kind": "function", "doc": "<p>Return information to correctly create retrieve view.</p>\n\n<p>Field set are set using gui_retrieve_fieldset attribute of the\nclass. It is used classes to define each fieldset.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>No payload data.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a dictonary with information to render retrieve\n  views on front-ends. Returns a dictonary with keys:</p>\n  \n  <ul>\n  <li><strong>fieldset [List[dict]]:</strong> A list of dictionaries with\n  information for rendering the retrieve page on frontend.\n  <ul>\n  <li><strong>fields [List[str]]:</strong> List of fields to be rendered at\n  fieldset.</li>\n  <li><strong>name [str]:</strong> Name of the fieldset.</li>\n  <li><strong>name__verbose [str]:</strong> Name of the fieldset translated\n  using Pumpwood I8s.</li>\n  </ul></li>\n  <li><strong>verbose_field [str]:</strong> String that can be used to create\n  user readble string at frontend.</li>\n  </ul>\n  \n  <p>Example:</p>\n  \n  <div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">{</span><span class=\"s1\">&#39;fieldset&#39;</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"s1\">&#39;fields&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;status&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;alias&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notes&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dimensions&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;updated_by&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;updated_at&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;name__verbose&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;main&#39;</span>\n    <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;main&#39;</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;fields&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;metabase_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;auto_embedding&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;object_model_class&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;object_pk&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;name__verbose&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;embedding&#39;</span>\n    <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;embedding&#39;</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;fields&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;expire_in_min&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;default_theme&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;default_is_bordered&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;default_is_titled&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;name__verbose&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;config&#39;</span>\n    <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;config&#39;</span><span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;fields&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;extra_info&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;name__verbose&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;extra_info&#39;</span>\n    <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;extra_info&#39;</span>\n  <span class=\"p\">}],</span>\n <span class=\"s1\">&#39;verbose_field&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;</span><span class=\"si\">{pk}</span><span class=\"s1\"> | </span><span class=\"si\">{description}</span><span class=\"s1\">&#39;</span><span class=\"p\">}</span>\n</code></pre>\n  </div>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodRestService.fill_options_validation", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.fill_options_validation", "kind": "function", "doc": "<p>Return fill options for retrieve/save pages.</p>\n\n<p>It will validate partial data fill return update fill options and\nraise validation errors if necessary.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>Partially filled data to be validated by the backend.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<ul>\n<li><strong>user_type[str]:</strong>\nMust be in ['api', 'gui']. It will return the options according\nto interface user is using. When requesting using 'gui',\nself.gui_readonly field will be setted as read-only.</li>\n<li><strong>field [str]:</strong>\nSet to validade an specific field. If not set all\nfields will be validated. Validation must be implemented.</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<p>Return [dict]:\n    Return an dictonary with <code>field_descriptions</code> generated by\n    <code>cls_fields_options</code> and <code>gui_readonly</code> indicating the fields\n    that will be set as read-only if user_type='gui'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodDataBaseRestService", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService", "kind": "class", "doc": "<p>This view extends PumpWoodRestService, including pivot function.</p>\n\n<p>This view will make data end-points avaiable at frontend for retriving\ndata without the use of serializers using pivot end-point and bulk\nsave of data using bulk-save end-point.</p>\n", "bases": "PumpWoodRestService"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodDataBaseRestService.model_variables", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.model_variables", "kind": "variable", "doc": "<p>Specify which model variables will be returned in pivot. Line index are\nthe model_variables - columns (function pivot parameter) itens.</p>\n", "default_value": "[]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodDataBaseRestService.expected_cols_bulk_save", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.expected_cols_bulk_save", "kind": "variable", "doc": "<p>Set the collumns needed at bulk_save.</p>\n", "default_value": "[]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodDataBaseRestService.pivot", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.pivot", "kind": "function", "doc": "<p>Pivot QuerySet data acording to columns selected, and filters passed.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p><code>filter_dict</code>, <code>exclude_dict</code> and <code>order_by</code> parameters have same\nbehaviour as list end-point.</p>\n\n<ul>\n<li><strong>columns [List[str]]:</strong>\nList of variables that will be considered as collumns to pivot\ndata.</li>\n<li><strong>format [{\u2018dict\u2019, \u2018list\u2019, \u2018series\u2019, \u2018split\u2019, \u2018tight\u2019, \u2018records\u2019,\n\u2018index\u2019}]:</strong> Format paramter to convert pandas DataFrame to\ndictonary. This dictonary will be returned by the function.</li>\n<li><strong>variables [List[str]]:</strong> Variables to be returned, this will\nmodify default behaviour of returning <code>model_variables</code> attribute\nfields.</li>\n<li><strong>show_deleted [bool]:</strong> If model has deleted field, results\nflaged as deleted won't be fetched. Setting show_deleted = True\nwill return this filtered results.</li>\n<li><strong>add_pk_column [bool]:</strong> If True, pk columns will be added to\nresults. Using pk columns will not permit to pivot information\n(makes no sense). So far only <code>id</code> column will be added to results\ntreating composite pks is on the roadmap.</li>\n<li><strong>limit [int]:</strong> Limit of the query results (number of objects that\nwill be returned).</li>\n</ul>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Return a pandas DataFrame serialized according to format\n  parameter.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'Pivot is not avaiable, set model_variables at view'. Indicates\nthat this end-point is not avaiable. To habilitate it, it is\nnecessary to set <code>model_variables</code> attribute at view.</li>\n<li><strong>PumpWoodQueryException:</strong>  'Columns must be a list of elements.'. Indicates that columns\ntype is not a list of strings.</li>\n<li><strong>PumpWoodQueryException:</strong>  'Column chosen as pivot is not at model variables'. Indicates\nthat column is not present on <code>model_variables</code> attribute.</li>\n<li><strong>PumpWoodQueryException:</strong>  Propagate errors raised when executing the query.</li>\n<li><strong>PumpWoodQueryException:</strong>  'value column not at melted data, it is not possible\nto pivot dataframe.'. Indicates that value column is not\navaiable query results, so it not possible to pivot data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.views.PumpWoodDataBaseRestService.bulk_save", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.bulk_save", "kind": "function", "doc": "<p>Bulk save data.</p>\n\n<p>This end-point is prefereble for large datainputs on Pumpwood, it is\nnot possible to update entries, just add new ones.</p>\n\n<p>It is much more performant than adding one by one using save\nend-point.</p>\n\n<h6 id=\"request-payload-data\">Request payload data:</h6>\n\n<p>List of dictionaries which must have self.expected_cols_bulk_save.</p>\n\n<h6 id=\"request-query-data\">Request query data:</h6>\n\n<p>No query parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>request:</strong>  Django request.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A dictonary with key <code>saved_count</code> indicating the number of\n  objects that were add to database.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>PumpWoodForbidden:</strong>  'Bulk save not avaiable. Set expected_cols_bulk_save on\nPumpWoodDataBaseRestService View to habilitate funciton.'\nIndicates that bulk_save end-point was not configured\nfor this model class. It is necessary to set\n<code>expected_cols_bulk_save</code> attribute to make end-point\navaiable.</li>\n<li><strong>PumpWoodObjectSavingException:</strong>  'Post payload is a list of objects.'. Indicates that the\nrequest payload is not a list as expected.</li>\n<li><strong>PumpWoodObjectSavingException:</strong>  'Expected columns and data columns do not match:\n\\nExpected columns:{expected}\n\\nData columns:{data_cols}'. Indicates that the fields passed\non the objects are diferent from the expected by the end-point\ncheck the data or the configuration of the end-point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "kind": "module", "doc": "<p>Define widgets that can be used on Django Admin.</p>\n\n<p>Define widgets to be used in Django admin and map foreign key fields.</p>\n"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect", "kind": "class", "doc": "<p>Widget for Foreign Keys associated with other microservices.</p>\n", "bases": "django.forms.widgets.Select"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.__init__", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model_class [str]:</strong>  Model class to search for foreign keys.</li>\n<li><strong>microservice [PumpWoodMicroService]:</strong>  PumpWoodMicroService object to fetch information from\nforeign key field.</li>\n<li><strong>description_field [str]:</strong>  Field to return on dropdown options.</li>\n<li><strong>pk_field [str]:</strong>  Field to be use as primary key at related table.</li>\n<li><strong>filter_dict [dict]:</strong>  Base filter_dict for query.</li>\n<li><strong>exclude_dict [dict]:</strong>  Base exclude_dict for query.</li>\n<li><strong>order_by [List[str]]:</strong>  Base order_by list. If not set results will be ordered by\ndescription_field.</li>\n<li><strong>widget_readonly [bool]:</strong>  Define if the widget will be considered read-only.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"n\">pumpwood_communication</span><span class=\"o\">.</span><span class=\"n\">microservices</span><span class=\"o\">.</span><span class=\"n\">PumpWoodMicroService</span>,</span><span class=\"param\">\t<span class=\"n\">description_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pk&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">widget_readonly</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.microservice", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.microservice", "kind": "variable", "doc": "<p>PumpWoodMicroService object to fetch information from\nforeign key field.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.model_class", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.model_class", "kind": "variable", "doc": "<p>Model class to search for foreign keys.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.description_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.description_field", "kind": "variable", "doc": "<p>Field to return on dropdown options.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.pk_field", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.pk_field", "kind": "variable", "doc": "<p>Field to be use as primary key at related table.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.filter_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.filter_dict", "kind": "variable", "doc": "<p>Base filter_dict for query.</p>\n", "annotation": ": dict"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.exclude_dict", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.exclude_dict", "kind": "variable", "doc": "<p>Base exclude_dict for query.</p>\n", "annotation": ": dict"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.widget_readonly", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.widget_readonly", "kind": "variable", "doc": "<p>Define if the widget will be considered read-only.</p>\n", "annotation": ": bool"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.order_by", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.order_by", "kind": "variable", "doc": "<p>Base order_by list. If not set results will be ordered by\ndescription_field.</p>\n", "annotation": ": List[str]"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.render", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.render", "kind": "function", "doc": "<p>Overwrite defult behaviour to set choices.</p>\n\n<p>Use <code>get_descriptions</code> functions to fetch objects from foreign key\nmicroservice and set them to choices at dropdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.get_context", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.get_context", "kind": "function", "doc": "<p>Overwrite defult behaviour to set readonly_select.</p>\n\n<p>Use <code>widget_readonly</code> to set if field is read-only.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">attrs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.get_descriptions", "modulename": "pumpwood-djangoviews.src.pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.get_descriptions", "kind": "function", "doc": "<p>Auxiliary function to fetch foreign key choices.</p>\n\n<p>Use <code>model_class</code> attribute to fetch information of the possible\nchoices associated with foreign key.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Returns a list of tuples with avaiable foreign key object as\n  (object[self.pk_field], object[self.description_field]).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();