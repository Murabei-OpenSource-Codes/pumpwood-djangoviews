window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pumpwood_djangoviews", "modulename": "pumpwood_djangoviews", "kind": "module", "doc": "<p>Pumpwood Django Views.</p>\n\n<p>This package helps to develop Pumpwood bases systens using Django backend.\nIt will create padronized end-point for each <code>model_class</code> (Django Models)\nthat can be consumed using PumpWoodMicroserive object from\npumpwood_communication package.</p>\n"}, {"fullname": "pumpwood_djangoviews.action", "modulename": "pumpwood_djangoviews.action", "kind": "module", "doc": "<p>Define actions decorator.</p>\n\n<p>Define action decorator that can be used to expose function at execute\naction pumpwood end-points.</p>\n"}, {"fullname": "pumpwood_djangoviews.action.Action", "modulename": "pumpwood_djangoviews.action", "qualname": "Action", "kind": "class", "doc": "<p>Define a Action class to be used in decorator action.</p>\n"}, {"fullname": "pumpwood_djangoviews.action.Action.__init__", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<p>Args:\n    func [Callable]:\n        Function that will be decorated with @action Pumpwood\n        decorator.\n    info [str]:\n        Function information that will be returned at [GET] <code>actions</code>\n        to user.\n    auth_header [str]:\n        Function argument that will be populated with <code>auth_header</code>\n        when executing the function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.action.Action.func_return", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.func_return", "kind": "variable", "doc": "<p>Type of the return associated with funciton.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.action.Action.doc_string", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.doc_string", "kind": "variable", "doc": "<p>Doc string of the function</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.action.Action.action_name", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.action_name", "kind": "variable", "doc": "<p>Name of the function.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.action.Action.is_static_function", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.is_static_function", "kind": "variable", "doc": "<p>True if funciton is staticmethod or a classmethod (does not require\nan object to run)</p>\n", "annotation": ": bool"}, {"fullname": "pumpwood_djangoviews.action.Action.parameters", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.parameters", "kind": "variable", "doc": "<p>Dictionary with function arguments with types and if it is necessary\n(not set a default value) or opcional (with default value).</p>\n", "annotation": ": dict"}, {"fullname": "pumpwood_djangoviews.action.Action.info", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.info", "kind": "variable", "doc": "<p>Info associated with function that will be passed to user at [GET]\n<code>action end-point.</code></p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.action.Action.auth_header", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.auth_header", "kind": "variable", "doc": "<p>Function argument that will receive <code>auth_header</code> information.\nauth_header can be to user impersonation when calling other end-points\nfrom the function.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.action.Action.to_dict", "modulename": "pumpwood_djangoviews.action", "qualname": "Action.to_dict", "kind": "function", "doc": "<p>Return dict representation of the action.</p>\n\n<p>Returns:\n    Return a dictonary used to serialize action to action end-point.\n    Keys avaiable:\n    - <strong>action_name [str]</strong>: Name of the function.\n    - <strong>is_static_function [bool]</strong>: Boolean value indicating if\n        the function is a classmethod or staticmethod.\n    - <strong>info [str]</strong>: Information that will be avaiable to user using\n        action end-points.\n    - <strong>return [str]</strong>: Type of the return of the function.\n    - <strong>parameters [dict]</strong>: Arguments of the function with\n        information of types, default values.\n    - <strong>doc_string [str]</strong>: Doc string associated with the function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.action.action", "modulename": "pumpwood_djangoviews.action", "qualname": "action", "kind": "function", "doc": "<p>Define decorator that will convert the function into a rest action.</p>\n\n<p>Args:\n    info [str]:\n        Just an information about the decorated function that will be\n        returned in GET /rest/<model_class>/actions/.\n    auth_header [str]:\n        Variable that will receive the auth_header, this can be used\n        at the function to impersonation of the user to call other\n        microservices.\nReturns:\n    Return decorated function.\nExample:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoviews.action</span> <span class=\"kn\">import</span> <span class=\"n\">action</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Action associated with a classmethod, is_static_function=True</span>\n<span class=\"c1\"># when returning information of the action. auth_header will</span>\n<span class=\"c1\"># be passed to function making possible to impersonate the user</span>\n<span class=\"nd\">@classmethod</span>\n<span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Dump dashboards and parameters&#39;</span><span class=\"p\">,</span> <span class=\"n\">auth_header</span><span class=\"o\">=</span><span class=\"s2\">&quot;auth_header&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">dump_dashboards</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span>\n                    <span class=\"n\">dashboard_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n                    <span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span>\n                    <span class=\"n\">filter_alias</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"n\">exclude_alias</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"n\">microservice</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span>\n        <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s1\">&#39;TestEndPoint&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">auth_header</span><span class=\"o\">=</span><span class=\"n\">auth_header</span><span class=\"p\">)</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Action associated with a classmethod, is_static_function=False</span>\n<span class=\"c1\"># when returning information of the action. Auth header won&#39;t be passed</span>\n<span class=\"c1\"># as function argument.</span>\n<span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"o\">=</span><span class=\"s1\">&#39;Dump dashboards and parameters&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete_dashboards</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">dashboard_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">info</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">auth_header</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.action.load_action_parameters", "modulename": "pumpwood_djangoviews.action", "qualname": "load_action_parameters", "kind": "function", "doc": "<p>Cast arguments to its original types.</p>\n\n<p>Args:\n    func [Callable]:\n        Function that parameters will be casted according to function\n        arguments tips.\n    parameters [dict]:\n        Parameters received at execute action end-point, they will be\n        casted according to funciton tips.\n    request:\n        Django request.\nReturns:\n    Return parameters casted according to tips at function arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.aux", "modulename": "pumpwood_djangoviews.aux", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.aux.map_django_types", "modulename": "pumpwood_djangoviews.aux.map_django_types", "kind": "module", "doc": "<p>Create a dictionary to map django columns with python types.</p>\n"}, {"fullname": "pumpwood_djangoviews.aux.map_django_types.django_map", "modulename": "pumpwood_djangoviews.aux.map_django_types", "qualname": "django_map", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;BooleanField&#x27;: &#x27;bool&#x27;, &#x27;NullBooleanField&#x27;: &#x27;bool&#x27;, &#x27;DateField&#x27;: &#x27;date&#x27;, &#x27;TimeField&#x27;: &#x27;time&#x27;, &#x27;DateTimeField&#x27;: &#x27;datetime&#x27;, &#x27;AutoField&#x27;: &#x27;int&#x27;, &#x27;BigAutoField&#x27;: &#x27;int&#x27;, &#x27;ForeignKey&#x27;: &#x27;int&#x27;, &#x27;IntegerField&#x27;: &#x27;int&#x27;, &#x27;BigIntegerField&#x27;: &#x27;int&#x27;, &#x27;PositiveIntegerField&#x27;: &#x27;int&#x27;, &#x27;SmallIntegerField&#x27;: &#x27;int&#x27;, &#x27;PositiveSmallIntegerField&#x27;: &#x27;int&#x27;, &#x27;DecimalField&#x27;: &#x27;float&#x27;, &#x27;FloatField&#x27;: &#x27;float&#x27;, &#x27;CharField&#x27;: &#x27;str&#x27;, &#x27;TextField&#x27;: &#x27;str&#x27;, &#x27;CommaSeparatedIntegerField&#x27;: &#x27;str&#x27;, &#x27;EmailField&#x27;: &#x27;str&#x27;, &#x27;FileField&#x27;: &#x27;str&#x27;, &#x27;FilePathField&#x27;: &#x27;str&#x27;, &#x27;BinaryField&#x27;: &#x27;bytes&#x27;, &#x27;ImageField&#x27;: &#x27;str&#x27;, &#x27;GenericIPAddressField&#x27;: &#x27;str&#x27;, &#x27;SlugField&#x27;: &#x27;str&#x27;, &#x27;URLField&#x27;: &#x27;str&#x27;, &#x27;UUIDField&#x27;: &#x27;str&#x27;, &#x27;JSONField&#x27;: &#x27;dict&#x27;}"}, {"fullname": "pumpwood_djangoviews.exception_handler", "modulename": "pumpwood_djangoviews.exception_handler", "kind": "module", "doc": "<p>Define custom exception handlers for Pumpwood systems.</p>\n\n<p>Custom erros can be used to correctly treat Pumpwood Exceptions and return\nthe treated erro as a JSON with not 2XX status code.</p>\n\n<p><code>custom_exception_handler</code> can be used at REST_FRAMEWORK MiddleWare at Django.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;rest_framework.permissions.IsAuthenticated&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;knox.auth.TokenAuthentication&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"s1\">&#39;EXCEPTION_HANDLER&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"c1\"># Add custom handler for API Calls</span>\n        <span class=\"s1\">&#39;pumpwood_djangoviews.exception_handler.custom_exception_handler&#39;</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n"}, {"fullname": "pumpwood_djangoviews.exception_handler.custom_exception_handler", "modulename": "pumpwood_djangoviews.exception_handler", "qualname": "custom_exception_handler", "kind": "function", "doc": "<p>Treat custom exception handler to PumpWoodExceptions.</p>\n\n<p>Args:\n    exc [Exception]:\n        Exception raised processing request.\n    context:\n        Context of the error that was raised.\nReturns:\n    Return a response with error code depending of the PumpWoodException\n    raised. It returns a serialized dictionary with exception data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exc</span>, </span><span class=\"param\"><span class=\"n\">context</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rest_framework</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.query", "modulename": "pumpwood_djangoviews.query", "kind": "module", "doc": "<p>Functions to run query at django using Pumpwood Rest API.</p>\n"}, {"fullname": "pumpwood_djangoviews.query.filter_by_dict", "modulename": "pumpwood_djangoviews.query", "qualname": "filter_by_dict", "kind": "function", "doc": "<p>Filter query using list dictonary.</p>\n\n<p>Filter query set using function args as argument for filter ORM function.\nfilter_list for filter_list, exclude_list for exclude and order by or\norder by.</p>\n\n<p>Args:\n    query_set:\n        Django original query set.\n    filter_dict [dict]:\n        Dictionary to be used as argument of\n        query_set.filter(<strong>filter_dict).\n    exclude_dict [dict]:\n        Dictionary to be used as argument o\n        query_set.exclude(</strong>exclude_dict)\n    order_by [list]:\n        List with arguments for query_set.order_by(*order_by)\nReturns:\n    Filtered query set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query_set</span>, </span><span class=\"param\"><span class=\"n\">filter_dict</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">exclude_dict</span><span class=\"o\">=</span><span class=\"p\">{}</span>, </span><span class=\"param\"><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.renderer", "modulename": "pumpwood_djangoviews.renderer", "kind": "module", "doc": "<p>Create a custom JSON Renderer.</p>\n\n<p>Use <code>pumpwood_communication.serializers import pumpJsonDump</code> to dump\nalternative python types such as pandas DataFrames and datetimes, not\nbeen necessary to treat at the codes.</p>\n"}, {"fullname": "pumpwood_djangoviews.renderer.PumpwoodJSONRenderer", "modulename": "pumpwood_djangoviews.renderer", "qualname": "PumpwoodJSONRenderer", "kind": "class", "doc": "<p>JSONRenderer that use pumpJsonDump to dump data to JSON.</p>\n", "bases": "rest_framework.renderers.JSONRenderer"}, {"fullname": "pumpwood_djangoviews.renderer.PumpwoodJSONRenderer.charset", "modulename": "pumpwood_djangoviews.renderer", "qualname": "PumpwoodJSONRenderer.charset", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;utf-8&#x27;"}, {"fullname": "pumpwood_djangoviews.renderer.PumpwoodJSONRenderer.render", "modulename": "pumpwood_djangoviews.renderer", "qualname": "PumpwoodJSONRenderer.render", "kind": "function", "doc": "<p>Overwrite render function to use pumpJsonDump.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">media_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">renderer_context</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers", "modulename": "pumpwood_djangoviews.routers", "kind": "module", "doc": "<p>Define defult Routers for Pumpwood systems.</p>\n\n<p>Pumpwood end-points have defaults paths that are registered at the application.\nThe end-points are mapped using pumpwood-communication package to be\nconsumed by the client side.</p>\n"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodRouter", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter", "kind": "class", "doc": "<p>Define a Router for PumpWoodRestService views.</p>\n\n<p>Router are used to define default end-points for Pumpwood for each\nmodel_class.</p>\n\n<p>Raises:\n    ImproperlyConfigured:\n        If a view different from PumpWoodRestService is used.\nExample:\n    Example of url.py file at Pumpwood Auth package.\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urljoin</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoviews.routers</span> <span class=\"kn\">import</span> <span class=\"n\">PumpWoodRouter</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoauth.config</span> <span class=\"kn\">import</span> <span class=\"n\">storage_object</span><span class=\"p\">,</span> <span class=\"n\">MEDIA_URL</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">pumpwood_djangoauth.metabase</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n <br />\n    <span class=\"n\">pumpwoodrouter</span> <span class=\"o\">=</span> <span class=\"n\">PumpWoodRouter</span><span class=\"p\">()</span>\n    <span class=\"n\">pumpwoodrouter</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">viewset</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">RestMetabaseDashboard</span><span class=\"p\">)</span>\n    <span class=\"n\">pumpwoodrouter</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">viewset</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">RestMetabaseDashboardParameter</span><span class=\"p\">)</span>\n <br />\n    <span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">]</span>\n <br />\n    <span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"n\">pumpwoodrouter</span><span class=\"o\">.</span><span class=\"n\">urls</span>\n    </code></pre>\n    </div></p>\n", "bases": "rest_framework.routers.BaseRouter"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodRouter.get_default_base_name", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.get_default_base_name", "kind": "function", "doc": "<p>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodRouter.register", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.register", "kind": "function", "doc": "<p>Register view urls using the name of the models as path.</p>\n\n<p>Args:\n    viewset: A view set from rest framework.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodRouter.validate_view", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.validate_view", "kind": "function", "doc": "<p>Validate if View is an PumpWoodRestService.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodRouter.get_registry_pattern", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.get_registry_pattern", "kind": "function", "doc": "<p>Register patterns for pumpwood end-points.</p>\n\n<p>Base name is set acording to Model name (model_class).</p>\n\n<p>Patterns registered:</p>\n\n<ul>\n<li><code>[POST] rest/{basename}/list/</code>: List end-point with pagination.</li>\n<li><code>[POST] rest/{basename}/list-without-pag/</code>: List end-point without\npagination.</li>\n<li><code>[GET] rest/{basename}/retrieve/{pk}/</code>: Retrieve data for an\n[pk] object.</li>\n<li><code>[GET] rest/{basename}/retrieve-file/{pk}/</code>: Retrieve a file\nfrom [pk] object.</li>\n<li><code>[DELETE] rest/{basename}/remove-file-field/{pk}/</code>: Remove a\nfile from [pk] object.</li>\n<li><code>[DELETE] rest/{basename}/delete/{pk}/</code>: Remove an object\nfrom database.</li>\n<li><code>[POST] rest/{basename}/delete/</code>: Remove all object acording to a\nquery dictonary.</li>\n<li><code>[POST] rest/{basename}/save/</code>: Create/Update an object.</li>\n<li><code>[GET] rest/{basename}/actions/</code>: List all avaiable actions for\nmodel_class</li>\n<li><code>[POST] rest/{basename}/actions/{action_name}/{pk}/</code>: Execute an\naction over an object of pk.</li>\n<li><code>[POST] rest/{basename}/actions/{action_name}/</code>: Execute an\naction associated with a classmethod or staticmethod (not\nassociated with an object).</li>\n<li><code>[GET,POST] rest/{basename}/options/</code>: Get request will return\ninformation about fields of model_class. POST can be used to\nparcial fill of the object. This end-point is DEPRECTED.</li>\n<li><code>[GET] rest/{basename}/list-options/</code>: Return information that can\nbe used to render list pages.</li>\n<li><code>[GET,POST] rest/{basename}/retrieve-options/</code>: GET Return\ninformation that can be used to render retrieve pages. POST will\nvalidate parcial object information.</li>\n</ul>\n\n<p>Returns:\n    Return a list of URLs associated with model_class with Pumpwood\n    end-points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span>, </span><span class=\"param\"><span class=\"n\">basename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodRouter.get_urls", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodRouter.get_urls", "kind": "function", "doc": "<p>Return a list of URL patterns, given the registered viewsets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodDataBaseRouter", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodDataBaseRouter", "kind": "class", "doc": "<p>Define a Router for PumpWoodDataBaseRestService views.</p>\n\n<p>Add some data routes to PumpWoodRouter.</p>\n\n<p>Patterns registered:\n    - <code>[POST] rest/{basename}/pivot/</code>: Retrieve data according to\n        query dictonary without deserializing using serializers (return\n        the Pandas dataframe converted with to_dict([format])).\n    - <code>[POST] rest/{basename}/bulk-save/</code>: Save many objects at same\n        time, it can be used to upload large datasets.</p>\n", "bases": "PumpWoodRouter"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodDataBaseRouter.validate_view", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodDataBaseRouter.validate_view", "kind": "function", "doc": "<p>Validate if View is an PumpWoodRestService.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.routers.PumpWoodDataBaseRouter.get_registry_pattern", "modulename": "pumpwood_djangoviews.routers", "qualname": "PumpWoodDataBaseRouter.get_registry_pattern", "kind": "function", "doc": "<p>Register patterns for pumpwood end-points.</p>\n\n<p>Base name is set acording to Model name (model_class).</p>\n\n<p>Patterns registered:</p>\n\n<ul>\n<li><code>[POST] rest/{basename}/list/</code>: List end-point with pagination.</li>\n<li><code>[POST] rest/{basename}/list-without-pag/</code>: List end-point without\npagination.</li>\n<li><code>[GET] rest/{basename}/retrieve/{pk}/</code>: Retrieve data for an\n[pk] object.</li>\n<li><code>[GET] rest/{basename}/retrieve-file/{pk}/</code>: Retrieve a file\nfrom [pk] object.</li>\n<li><code>[DELETE] rest/{basename}/remove-file-field/{pk}/</code>: Remove a\nfile from [pk] object.</li>\n<li><code>[DELETE] rest/{basename}/delete/{pk}/</code>: Remove an object\nfrom database.</li>\n<li><code>[POST] rest/{basename}/delete/</code>: Remove all object acording to a\nquery dictonary.</li>\n<li><code>[POST] rest/{basename}/save/</code>: Create/Update an object.</li>\n<li><code>[GET] rest/{basename}/actions/</code>: List all avaiable actions for\nmodel_class</li>\n<li><code>[POST] rest/{basename}/actions/{action_name}/{pk}/</code>: Execute an\naction over an object of pk.</li>\n<li><code>[POST] rest/{basename}/actions/{action_name}/</code>: Execute an\naction associated with a classmethod or staticmethod (not\nassociated with an object).</li>\n<li><code>[GET,POST] rest/{basename}/options/</code>: Get request will return\ninformation about fields of model_class. POST can be used to\nparcial fill of the object. This end-point is DEPRECTED.</li>\n<li><code>[GET] rest/{basename}/list-options/</code>: Return information that can\nbe used to render list pages.</li>\n<li><code>[GET,POST] rest/{basename}/retrieve-options/</code>: GET Return\ninformation that can be used to render retrieve pages. POST will\nvalidate parcial object information.</li>\n</ul>\n\n<p>Returns:\n    Return a list of URLs associated with model_class with Pumpwood\n    end-points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">viewset</span>, </span><span class=\"param\"><span class=\"n\">basename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers", "modulename": "pumpwood_djangoviews.serializers", "kind": "module", "doc": "<p>Define base serializer for pumpwood and custom fields.</p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.ClassNameField", "modulename": "pumpwood_djangoviews.serializers", "qualname": "ClassNameField", "kind": "class", "doc": "<p>Serializer Field that returns model name.</p>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.ClassNameField.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "ClassNameField.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.ClassNameField.get_attribute", "modulename": "pumpwood_djangoviews.serializers", "qualname": "ClassNameField.get_attribute", "kind": "function", "doc": "<p>Pass the object instance onto <code>to_representation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.ClassNameField.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "ClassNameField.to_representation", "kind": "function", "doc": "<p>Serialize the object's class name.</p>\n\n<p>ENDPOINT_SUFFIX enviroment variable is DEPRECTED.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.ClassNameField.to_internal_value", "modulename": "pumpwood_djangoviews.serializers", "qualname": "ClassNameField.to_internal_value", "kind": "function", "doc": "<p>Make no treatment of the income data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField", "kind": "class", "doc": "<p>Serializer field for ChoiceTypeField.</p>\n\n<p>Returns a tupple with both real value on [0] and get_{field_name}_display\non [1]. to_internal_value uses only de first value os the tupple\nif a tupple, or just the value if not a tupple.</p>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField.field_name", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField.field_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField.bind", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField.bind", "kind": "function", "doc": "<p>Initializes the field name and parent for the field instance.\nCalled when a field is added to the parent serializer instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field_name</span>, </span><span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField.get_attribute", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField.get_attribute", "kind": "function", "doc": "<p>Pass the object instance onto <code>to_representation</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField.to_representation", "kind": "function", "doc": "<p>No changes, DEPRECTED.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.CustomChoiceTypeField.to_internal_value", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomChoiceTypeField.to_internal_value", "kind": "function", "doc": "<p>No changes, DEPRECTED.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField", "kind": "class", "doc": "<p>Serializer field for ForeignKey using microservice.</p>\n\n<p>This serializer will fetch object data from a microservice using a\nmicroservice object.</p>\n\n<p>This field makes a call to the loadbalancer, caution when microservice\ncalls the same microservice of origin or serialization might result on\ncircular fetching.</p>\n\n<p>Example of usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">MetabaseDashboardSerializer</span><span class=\"p\">(</span><span class=\"n\">DynamicFieldsModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;id&#39;</span><span class=\"p\">,</span> <span class=\"n\">allow_null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                  <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">ClassNameField</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Foreign Key</span>\n    <span class=\"c1\"># Will return the object data associated with updated_by_id at</span>\n    <span class=\"c1\"># updated_by key at the serialized object.</span>\n    <span class=\"n\">updated_by</span> <span class=\"o\">=</span> <span class=\"n\">MicroserviceForeignKeyField</span><span class=\"p\">(</span>\n        <span class=\"n\">model_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;User&quot;</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s2\">&quot;updated_by_id&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">microservice</span><span class=\"o\">=</span><span class=\"n\">microservice</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">display_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;username&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<p>Args:\n    source [str]:\n        Source attribute that contains id value associated with\n        a foreign key.\n    microservice [PumpWoodMicroService]:\n        PumpWoodMicroService object that will be used to fetch\n        information of the object associated with foreign key id.\n    model_class [str]:\n        Model class that will be used to request information at\n        with a retrieve.\n    display_field [str]:\n        Field that will be set as <code>__display_field__</code> at object\n        dictonary.\n    fields List [str]:\n        List of the fields that should be returned at the object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"n\">pumpwood_communication</span><span class=\"o\">.</span><span class=\"n\">microservices</span><span class=\"o\">.</span><span class=\"n\">PumpWoodMicroService</span>,</span><span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">display_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.microservice", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.microservice", "kind": "variable", "doc": "<p>Microservice object that will make retrieve calls for foreign key\nobject.</p>\n", "annotation": ": pumpwood_communication.microservices.PumpWoodMicroService"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.model_class", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.model_class", "kind": "variable", "doc": "<p>String setting the foreign key destiny model_class.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.display_field", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.display_field", "kind": "variable", "doc": "<p>Set a display field to be returned as __display_field__ at foreign key\nobject. This might help frontend rendering dropdown or other\nvisualizations.</p>\n", "annotation": ": str"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.fields", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.fields", "kind": "variable", "doc": "<p>List of the field that will be returned with foreign key object.</p>\n", "annotation": ": List[str]"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.get_fields_options_key", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.get_fields_options_key", "kind": "function", "doc": "<p>Return key that will be used on fill options return.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.bind", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.bind", "kind": "function", "doc": "<p>Initializes the field name and parent for the field instance.\nCalled when a field is added to the parent serializer instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field_name</span>, </span><span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.get_attribute", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.get_attribute", "kind": "function", "doc": "<p>Given the <em>outgoing</em> object instance, return the primitive value\nthat should be used for this field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.to_representation", "kind": "function", "doc": "<p>Use microservice to get object at serialization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.to_internal_value", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.to_internal_value", "kind": "function", "doc": "<p>Transform the <em>incoming</em> primitive data into a native value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceForeignKeyField.to_dict", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceForeignKeyField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField", "kind": "class", "doc": "<p>Serializer field for related objects using microservice.</p>\n\n<p>It is an informational serializer to related models.</p>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.microservice", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.microservice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.model_class", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.model_class", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.foreign_key", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.foreign_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.pk_field", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.pk_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.order_by", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.order_by", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.fields", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.fields", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.get_fields_options_key", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.get_fields_options_key", "kind": "function", "doc": "<p>Return key that will be used on fill options return.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.bind", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.bind", "kind": "function", "doc": "<p>Initializes the field name and parent for the field instance.\nCalled when a field is added to the parent serializer instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">field_name</span>, </span><span class=\"param\"><span class=\"n\">parent</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.get_attribute", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.get_attribute", "kind": "function", "doc": "<p>We pass the object instance onto <code>to_representation</code>,\nnot just the field attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.to_representation", "kind": "function", "doc": "<p>Use microservice to get object at serialization.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.to_internal_value", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.to_internal_value", "kind": "function", "doc": "<p>Unserialize data from related objects as empty dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.MicroserviceRelatedField.to_dict", "modulename": "pumpwood_djangoviews.serializers", "qualname": "MicroserviceRelatedField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField", "kind": "class", "doc": "<p>Serializer field for ForeignKey using microservice.</p>\n\n<p>Returns a tupple with both real value on [0] and get_{field_name}_display\non [1]. to_internal_value uses only de first value os the tupple\nif a tupple, or just the value if not a tupple.</p>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.serializer_cache", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.serializer_cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.serializer", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.serializer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.display_field", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.display_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.fields", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.fields", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.get_fields_options_key", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.get_fields_options_key", "kind": "function", "doc": "<p>Return key that will be used on fill options return.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.to_representation", "kind": "function", "doc": "<p>Transform the <em>outgoing</em> native value into primitive data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.LocalForeignKeyField.to_dict", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalForeignKeyField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField", "kind": "class", "doc": "<p>Serializer field for related objects using microservice.</p>\n\n<p>It is an informational serializer to related models.</p>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.serializer_cache", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.serializer_cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.serializer", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.serializer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.order_by", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.order_by", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.fields", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.fields", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.get_fields_options_key", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.get_fields_options_key", "kind": "function", "doc": "<p>Return key that will be used on fill options return.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.to_representation", "kind": "function", "doc": "<p>Return all related data serialized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.LocalRelatedField.to_dict", "modulename": "pumpwood_djangoviews.serializers", "qualname": "LocalRelatedField.to_dict", "kind": "function", "doc": "<p>Return a dict with values to be used on options end-point.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.CustomNestedSerializer", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomNestedSerializer", "kind": "class", "doc": "<p>Uses the serializer to create the object representation, but only uses\nits pk to get object to its internal value.</p>\n", "bases": "rest_framework.fields.Field"}, {"fullname": "pumpwood_djangoviews.serializers.CustomNestedSerializer.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomNestedSerializer.__init__", "kind": "function", "doc": "<p>When a field is instantiated, we store the arguments that were used,\nso that we can present a helpful representation of the object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.CustomNestedSerializer.nested_serializer", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomNestedSerializer.nested_serializer", "kind": "variable", "doc": "<p>Serializer to be used on the model</p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.serializers.CustomNestedSerializer.many", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomNestedSerializer.many", "kind": "variable", "doc": "<p>Tells if is a many relation or not</p>\n", "default_value": "False"}, {"fullname": "pumpwood_djangoviews.serializers.CustomNestedSerializer.to_representation", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomNestedSerializer.to_representation", "kind": "function", "doc": "<p>Transform the <em>outgoing</em> native value into primitive data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.CustomNestedSerializer.to_internal_value", "modulename": "pumpwood_djangoviews.serializers", "qualname": "CustomNestedSerializer.to_internal_value", "kind": "function", "doc": "<p>Transform the <em>incoming</em> primitive data into a native value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.validator_check_for_pk", "modulename": "pumpwood_djangoviews.serializers", "qualname": "validator_check_for_pk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.validator_check_for_pk_many", "modulename": "pumpwood_djangoviews.serializers", "qualname": "validator_check_for_pk_many", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer", "modulename": "pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer", "kind": "class", "doc": "<p>A ModelSerializer with fields args in init.</p>\n", "bases": "rest_framework.serializers.ModelSerializer"}, {"fullname": "pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.__init__", "modulename": "pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.get_list_fields", "modulename": "pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.get_list_fields", "kind": "function", "doc": "<p>Get list fields from serializer.</p>\n\n<p>Args:\n    No Args.\nReturn [list]:\n    Default fields to be used at list and retrive with\n    default_fields=True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.get_foreign_keys", "modulename": "pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.get_foreign_keys", "kind": "function", "doc": "<p>Return a dictonary with all foreign_key fields.</p>\n\n<p>Args:\n    No Args.\nKwargs:\n    No Kwargs.\nReturn [dict]:\n    Return a dictionary with field name as keys and relation\n    information as value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.serializers.DynamicFieldsModelSerializer.get_related_fields", "modulename": "pumpwood_djangoviews.serializers", "qualname": "DynamicFieldsModelSerializer.get_related_fields", "kind": "function", "doc": "<p>Return a dictionary with all related fields (M2M).</p>\n\n<p>Args:\n    No Args.\nKwargs:\n    No Kwargs.\nReturn [dict]:\n    Return a dictionary with field name as keys and relation\n    information as value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.storage", "modulename": "pumpwood_djangoviews.storage", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.storage.PumpwoodStorage", "modulename": "pumpwood_djangoviews.storage", "qualname": "PumpwoodStorage", "kind": "class", "doc": "<p>Stotage to integrate Pumpwood Auth and Storage with Django APIs.</p>\n", "bases": "django.core.files.storage.Storage"}, {"fullname": "pumpwood_djangoviews.storage.PumpwoodStorage.exists", "modulename": "pumpwood_djangoviews.storage", "qualname": "PumpwoodStorage.exists", "kind": "function", "doc": "<p>Check if file exists at the Storage.</p>\n\n<p>It will use enviroment variable to set the object.</p>\n\n<p>Args:\n    name [str]: Full name of the file.\nReturn [bool]:\n    True if file already exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.storage.PumpwoodStorage.url", "modulename": "pumpwood_djangoviews.storage", "qualname": "PumpwoodStorage.url", "kind": "function", "doc": "<p>Return a URL that will be used to retrieve file directly from browser.</p>\n\n<p>It use the media path set as url with Pumpwood Auth which is an\nauthenticated end-point. File will be server as streaming directly\nfrom storage.</p>\n\n<p>Args:\n    name [str]: Full name of the file.\nReturn [str]:\n    Return the absolute path of the file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.utils", "modulename": "pumpwood_djangoviews.utils", "kind": "module", "doc": "<p>Miscellaneous auxiliary functions.</p>\n"}, {"fullname": "pumpwood_djangoviews.utils.reverse_object_admin_url", "modulename": "pumpwood_djangoviews.utils", "qualname": "reverse_object_admin_url", "kind": "function", "doc": "<p>Return Admin URL for an object.</p>\n\n<p>Args:\n    obj [object|model_class]: Object or Django model to be reversed.\n    id [int]: Id of the object to be reversed.\nReturn [str]:\n    Reverse Admin URL.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views", "modulename": "pumpwood_djangoviews.views", "kind": "module", "doc": "<p>Create views using Pumpwood pattern.</p>\n"}, {"fullname": "pumpwood_djangoviews.views.save_serializer_instance", "modulename": "pumpwood_djangoviews.views", "qualname": "save_serializer_instance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">serializer_instance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService", "kind": "class", "doc": "<p>Basic View-Set for pumpwood rest end-points.</p>\n", "bases": "rest_framework.viewsets.ViewSet"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.renderer_classes", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.renderer_classes", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;pumpwood_djangoviews.renderer.PumpwoodJSONRenderer&#x27;&gt;]"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.endpoint_description", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.endpoint_description", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.dimensions", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.dimensions", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.icon", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.icon", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.service_model", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.service_model", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.storage_object", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.storage_object", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.microservice", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.microservice", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.trigger", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.trigger", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.serializer", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.serializer", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.file_fields", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.file_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list_paginate_limit", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_paginate_limit", "kind": "variable", "doc": "<p></p>\n", "default_value": "50"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list_fields", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_fields", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.gui_retrieve_fieldset", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.gui_retrieve_fieldset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict", "default_value": "None"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.gui_verbose_field", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.gui_verbose_field", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;pk&#x27;"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.gui_readonly", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.gui_readonly", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]", "default_value": "[]"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.get_gui_retrieve_fieldset", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_gui_retrieve_fieldset", "kind": "function", "doc": "<p>Return gui_retrieve_fieldset attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.get_gui_verbose_field", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_gui_verbose_field", "kind": "function", "doc": "<p>Return gui_verbose_field attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.get_gui_readonly", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_gui_readonly", "kind": "function", "doc": "<p>Return gui_readonly attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.get_list_fields", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_list_fields", "kind": "function", "doc": "<p>Return list_fields attribute.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list", "kind": "function", "doc": "<p>View function to list objects with pagination.</p>\n\n<p>Number of objects are limited by\nsettings.REST_FRAMEWORK['PAGINATE_BY']. To get next page, use\nexclude_dict['pk__in': [list of the received pks]] to get more\nobjects.</p>\n\n<p>Use to limit the query .query.filter_by_dict function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>request.data['filter_dict']</strong>:  Dictionary passed as\nobjects.filter(**filter_dict)</li>\n<li><strong>request.data['exclude_dict']</strong>:  Dictionary passed as\nobjects.exclude(**exclude_dict)</li>\n<li><strong>request.data['order_by']</strong>:  List passed as\nobjects.order_by(*order_by)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of objects using list_serializer</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list_without_pag", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_without_pag", "kind": "function", "doc": "<p>List data without pagination.</p>\n\n<p>View function to list objects. Basicaley the same of list, but without\nlimitation by settings.REST_FRAMEWORK['PAGINATE_BY'].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>request.data['filter_dict']</strong>:  Dictionary passed as\nobjects.filter(**filter_dict)</li>\n<li><strong>request.data['exclude_dict']</strong>:  Dictionary passed as\nobjects.exclude(**exclude_dict)</li>\n<li><strong>request.data['order_by']</strong>:  List passed as\nobjects.order_by(*order_by)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of objects using list_serializer</p>\n</blockquote>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Be careful with the number of the objects that will be retrieved</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.retrieve", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.retrieve", "kind": "function", "doc": "<p>Retrieve view, uses the retrieve_serializer to return object with pk.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>int pk</strong>:  Object pk to be retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The representation of the object passed by\n           self.retrieve_serializer</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.retrieve_file", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.retrieve_file", "kind": "function", "doc": "<p>Read file without stream.</p>\n\n<p>Args:\n    pk (int): Pk of the object to save file field.\n    file_field(str): File field to receive stream file.</p>\n\n<p>Returns:\n    A stream of bytes with da file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.delete", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.delete", "kind": "function", "doc": "<p>Delete view.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>int pk</strong>:  Object pk to be retrieve</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.delete_many", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.delete_many", "kind": "function", "doc": "<p>Delete many data using filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>request.data['filter_dict']</strong>:  Dictionary passed as\nobjects.filter(**filter_dict)</li>\n<li><strong>request.data['exclude_dict']</strong>:  Dictionary passed as\nobjects.exclude(**exclude_dict)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if delete is ok</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.remove_file_field", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.remove_file_field", "kind": "function", "doc": "<p>Remove file field.</p>\n\n<p>Args:\n    pk (int): pk of the object.\nKwargs:\n    No kwargs for this function.\nRaises:\n    PumpWoodForbidden: If file_file is not in file_fields keys of the\n        view.\n    PumpWoodException: Propagates exceptions from storage_objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.save", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.save", "kind": "function", "doc": "<p>Save and update object acording to request.data.</p>\n\n<p>Object will be updated if request.data['pk'] is not None.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict request.data</strong>:  Object representation as\nself.retrieve_serializer\n:raise PumpWoodException: 'Object model class diferent from\n{service_model} : {service_model}' request.data['service_model']\n    not the same as self.service_model.__name__</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.get_actions", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.get_actions", "kind": "function", "doc": "<p>Get all actions with action decorator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list_actions", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_actions", "kind": "function", "doc": "<p>List model exposed actions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list_actions_with_objects", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_actions_with_objects", "kind": "function", "doc": "<p>List model exposed actions acording to selected objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.execute_action", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.execute_action", "kind": "function", "doc": "<p>Execute action over object or class using parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span>, </span><span class=\"param\"><span class=\"n\">action_name</span>, </span><span class=\"param\"><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.cls_fields_options", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.cls_fields_options", "kind": "function", "doc": "<p>Return field options using serializer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.search_options", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.search_options", "kind": "function", "doc": "<p>Return options to be used in list funciton.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with options for list parameters</p>\n</blockquote>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Must be implemented</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.fill_options", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.fill_options", "kind": "function", "doc": "<p>Return options for object update acording its partial data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict request.data</strong>:  Partial object data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary with options for diferent objects values</p>\n</blockquote>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>Must be implemented</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.list_view_options", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.list_view_options", "kind": "function", "doc": "<p>Return information to render list views on frontend.</p>\n\n<p>Args:\n    No args.\nKwargs:\n    No Kwargs.\nReturn [dict]:\n    Return a dictionary with keys:\n    - list_fields[List[str]]: Return a list of fields that should be\n        redendered on list view.\n    - field_type [dict]: Return information for each column to\n        render search filters on frontend.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.retrieve_view_options", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.retrieve_view_options", "kind": "function", "doc": "<p>Return information to correctly create retrieve view.</p>\n\n<p>Field set are set using gui_retrieve_fieldset attribute of the\nclass. It is used classes to define each fieldset.</p>\n\n<p>Args:\n    No Args.\nKwargs:\n    No Kwargs.\nReturn [dict]:\n    Return a dictonary with information to render retrieve\n    views on front-ends. Keys:\n     - fieldset [dict]: A dictionary with inline tabs names as\n        key and fields that will be redendered.</p>\n\n<pre><code>Exemple:\n{\n    \"fieldset\": {\n        \"Nome da tab. 1\": {\n            \"fields\": [\"field1\", \"field2\", \"field3\"]\n        },\n        \"Nome da tab. 2\": {\n            \"fields\": [\"field1\"]\n        }\n    }\n}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodRestService.fill_options_validation", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodRestService.fill_options_validation", "kind": "function", "doc": "<p>Return fill options for retrieve/save pages.</p>\n\n<p>It will validate partial data fill and return erros if necessary.</p>\n\n<p>Args:\n    partial_data [dict]: Partially filled data to be validated by\n        the backend.</p>\n\n<p>Kwargs:\n    user_type[str]: Must be in ['api', 'gui']. It will return the\n        options according to interface user is using. When requesting\n        using gui, self.gui_readonly field will be setted as read-only.\n    field [str]: Set to validade an specific field. If not set all\n        fields will be validated.\nReturn [dict]:\n    Return a dictionary</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodDataBaseRestService", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService", "kind": "class", "doc": "<p>This view extends PumpWoodRestService, including pivot function.</p>\n", "bases": "PumpWoodRestService"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodDataBaseRestService.model_variables", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.model_variables", "kind": "variable", "doc": "<p>Specify which model variables will be returned in pivot. Line index are\nthe model_variables - columns (function pivot parameter) itens.</p>\n", "default_value": "[]"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodDataBaseRestService.expected_cols_bulk_save", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.expected_cols_bulk_save", "kind": "variable", "doc": "<p>Set the collumns needed at bulk_save.</p>\n", "default_value": "[]"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodDataBaseRestService.pivot", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.pivot", "kind": "function", "doc": "<p>Pivot QuerySet data acording to columns selected, and filters passed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>request.data['filter_dict']</strong>:  Dictionary passed as\nobjects.filter(**filter_dict)</li>\n<li><strong>request.data['exclude_dict']</strong>:  Dictionary passed as\nobjects.exclude(**exclude_dict)</li>\n<li><strong>request.data['order_by']</strong>:  List passed as\nobjects.order_by(*order_by)</li>\n<li><strong>request.data['columns']</strong>:  Variables to be used as pivot collumns</li>\n<li><strong>request.data['format']</strong>:  Format used in\npandas.DataFrame().to_dict()</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Return database data pivoted acording to columns parameter\n  :rtyoe: panas.Dataframe converted to disctionary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.views.PumpWoodDataBaseRestService.bulk_save", "modulename": "pumpwood_djangoviews.views", "qualname": "PumpWoodDataBaseRestService.bulk_save", "kind": "function", "doc": "<p>Bulk save data.</p>\n\n<p>Args:\n    data_to_save(list): List of dictionaries which must have\n                        self.expected_cols_bulk_save.\nReturn:\n    dict: ['saved_count']: total of saved objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.widgets", "modulename": "pumpwood_djangoviews.widgets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect", "kind": "class", "doc": "<p></p>\n", "bases": "django.forms.widgets.Select"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.__init__", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.__init__", "kind": "function", "doc": "<p>__init__.</p>\n\n<p>Args:\n    model_class [str]: Model class to search for foreign keys\n    microservice [PumpWoodMicroService]:\n    description_field [str]: Field to return on dropdown options.</p>\n\n<p>Kwargs:\n    pk_field [str] = \"pk\": Field to be use as primary key at related\n        table.\n    filter_dict [dict] = {}: Base filter_dict for query.\n    exclude_dict [dict] = {}: Base exclude_dict for query.\n    order_by [List[str]] = None: Base order_by list.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_class</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">microservice</span><span class=\"p\">:</span> <span class=\"n\">pumpwood_communication</span><span class=\"o\">.</span><span class=\"n\">microservices</span><span class=\"o\">.</span><span class=\"n\">PumpWoodMicroService</span>,</span><span class=\"param\">\t<span class=\"n\">description_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pk_field</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;pk&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">filter_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">exclude_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">order_by</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">widget_readonly</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.template_name", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.template_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pumpwood_views/foreign_key_select.html&#x27;"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.option_template_name", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.option_template_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pumpwood_views/foreign_key_select_option.html&#x27;"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.microservice", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.microservice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.model_class", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.model_class", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.description_field", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.description_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.pk_field", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.pk_field", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.filter_dict", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.filter_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.exclude_dict", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.exclude_dict", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.widget_readonly", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.widget_readonly", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.order_by", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.order_by", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.render", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.render", "kind": "function", "doc": "<p>Render the widget as an HTML string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.get_context", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.get_context", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">attrs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.get_descriptions", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.get_descriptions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pumpwood_djangoviews.widgets.PumpWoodForeignKeySelect.media", "modulename": "pumpwood_djangoviews.widgets", "qualname": "PumpWoodForeignKeySelect.media", "kind": "variable", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();